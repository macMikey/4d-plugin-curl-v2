/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : cURL
 #	author : miyako
 #	2018/11/22
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

std::mutex mutexPf;
std::mutex mutexMcurl;

#if USE_JSONCPP
#else
std::mutex mutexJson;
#endif

pxProxyFactory *pf = NULL;
CURLM *gmcurl = NULL;

void OnStartup()
{
    curl_global_init(CURL_GLOBAL_DEFAULT);
    
    if(1)
    {
        std::lock_guard<std::mutex> lock(mutexMcurl);
        
        gmcurl = curl_multi_init();
    }
    
    if(1)
    {
        std::lock_guard<std::mutex> lock(mutexPf);
        
        pf = px_proxy_factory_new();
    }
    
}

void OnExit()
{
    if(gmcurl)
    {
        std::lock_guard<std::mutex> lock(mutexMcurl);
        
        curl_multi_cleanup(gmcurl);
        gmcurl = NULL;
    }
    
    curl_global_cleanup();
    
    if(pf)
    {
        std::lock_guard<std::mutex> lock(mutexPf);
        
        px_proxy_factory_free(pf);
        pf = NULL;
    }
}

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
//        PA_long32 pProcNum = selector;
//        sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
//        PackagePtr pParams = (PackagePtr)params->fParameters;
        
        switch(selector)
        {
            case kInitPlugin :
            case kServerInitPlugin :
                OnStartup();
                break;
                
            case kDeinitPlugin :
                OnExit();
                break;
                // --- cURL
                
            case 1 :
                cURL_VersionInfo(params);
                break;
                
            case 2 :
                cURL_Escape(params);
                break;
                
            case 3 :
                cURL_Unescape(params);
                break;
                
            case 4 :
                cURL_GetDate(params);
                break;
                
            case 5 :
                _cURL(params);
                break;
                
        }

    }
	catch(...)
	{

	}
}



// ------------------------------------- cURL -------------------------------------

#pragma mark -

CURLcode curl_perform(CURL *curl, C_TEXT& Param4, C_TEXT& userInfo)
{
    /* callback argument or return value if method name is empty */
    CUTF16String info;
    CURLcode result = CURLE_OK;
    
    std::lock_guard<std::mutex> lock(mutexMcurl);
    
    result = curl_easy_perform(curl);
    
    curl_get_info(curl, info);
    Param4.setUTF16String(&info);
    
    return result;
}

CURLcode curl_perform(CURLM *mcurl, CURL *curl, C_TEXT& Param4, C_TEXT& userInfo) {
    
    /* callback argument or return value if method name is empty */
    
    CUTF16String info;
    CURLMcode mc = CURLM_OK; /* not used to abort */
    CURLcode result = CURLE_OK;
    
    PA_long32 currentProcessNumber = PA_GetCurrentProcessNumber();
    
#if USE_PA_EXECUTE_METHOD_BY_ID
    PA_long32 method_id = PA_GetMethodID((PA_Unichar *)Param4.getUTF16StringPtr());
#else
    PA_long32 method_id = 0;
#endif
    
    time_t startTime = time(0);
    
    bool isCallbackSet = Param4.getUTF16Length();
    
    PA_Variable    cbparams[4];
    
    if(method_id)
    {
        cbparams[0] = PA_CreateVariable(eVK_Unistring);
        cbparams[1] = PA_CreateVariable(eVK_Unistring);
        cbparams[2] = PA_CreateVariable(eVK_Undefined);
        cbparams[3] = PA_CreateVariable(eVK_Undefined);
        PA_SetUnistring((&(cbparams[1].uValue.fString)),
                        (PA_Unichar *)userInfo.getUTF16StringPtr());
    }else
    {
        cbparams[0] = PA_CreateVariable(eVK_Unistring);
        cbparams[1] = PA_CreateVariable(eVK_Boolean);
        cbparams[2] = PA_CreateVariable(eVK_Unistring);
        cbparams[3] = PA_CreateVariable(eVK_Unistring);
        PA_SetUnistring((&(cbparams[0].uValue.fString)),
                        (PA_Unichar *)Param4.getUTF16StringPtr());
        PA_SetUnistring((&(cbparams[3].uValue.fString)),
                        (PA_Unichar *)userInfo.getUTF16StringPtr());
    }
    
    int running_handles = 0;
    
    if(1)
    {
        std::lock_guard<std::mutex> lock(mutexMcurl);
        
        curl_multi_add_handle(mcurl, curl);
        curl_multi_perform(mcurl, &running_handles);
    }
    
    do
    {
        PA_YieldAbsolute();
        
        struct timeval tv;
        int rc = 0;
        
        fd_set fdread;
        fd_set fdwrite;
        fd_set fdexcep;
        
        int maxfd = -1;
        long curl_timeout = -1;
        
        FD_ZERO(&fdread);
        FD_ZERO(&fdwrite);
        FD_ZERO(&fdexcep);
        
        tv.tv_sec = 1;
        tv.tv_usec = 0;
        
        if(1)
        {
            std::lock_guard<std::mutex> lock(mutexMcurl);
            
            curl_multi_timeout(mcurl, &curl_timeout);
            
            if(curl_timeout >= 0)
            {
                tv.tv_sec = curl_timeout / 1000;
                if(tv.tv_sec > 1)
                    tv.tv_sec = 1;
                else
                    tv.tv_usec = (curl_timeout % 1000) * 1000;
            }
            
            mc = curl_multi_fdset(mcurl, &fdread, &fdwrite, &fdexcep, &maxfd);
        }
        
        if(mc != CURLM_OK)
        {
            break;
        }
        
        if(maxfd == -1)
        {
            /* https://curl.haxx.se/libcurl/c/multi-post.html */
            
            PA_Variable params[2];
            params[0] = PA_CreateVariable(eVK_Longint);
            PA_SetLongintVariable(&params[0], currentProcessNumber);
            
            params[1] = PA_CreateVariable(eVK_Real);
            PA_SetRealVariable(&params[1], 6);//100ms
            
            PA_ExecuteCommandByID(323 /*DELAY_PROCESS*/ , params, 2);
            
            PA_ClearVariable(&params[0]);
            PA_ClearVariable(&params[1]);
            
            rc = 0;
        }
        else
        {
            rc = select(maxfd+1, &fdread, &fdwrite, &fdexcep, &tv);
        }
        switch(rc) {
            case -1:
                /* select error */
                break;
            case 0:
            default:
                if(1)
                {
                    std::lock_guard<std::mutex> lock(mutexMcurl);
                    
                    /* timeout or readable/writable sockets */
                    mc = curl_multi_perform(mcurl, &running_handles);
                    /* callback method */
                }
            {

                if(isCallbackSet)
                {
                    
                    time_t now = time(0);
                    time_t elapsedTime = abs(startTime - now);
                    if(elapsedTime > 0)
                    {
                        startTime = now;
                        
                        if(1)
                        {
                            std::lock_guard<std::mutex> lock(mutexMcurl);
                            
                            curl_get_info(curl, info);
                        }
                        if(method_id)
                        {
                            PA_SetUnistring((&(cbparams[0].uValue.fString)),
                                            (PA_Unichar *)info.c_str());
                            
                            PA_Variable statusCode = PA_ExecuteMethodByID(method_id, cbparams, 2);
                            if(PA_GetVariableKind(statusCode) == eVK_Boolean)
                            {
                                if(PA_GetBooleanVariable(statusCode))
                                {
                                    /* abort */
                                    result = CURLE_ABORTED_BY_CALLBACK;
                                    goto curl_abort_transfer;
                                }
                            }
                        }else
                        {
                            PA_SetUnistring((&(cbparams[2].uValue.fString)),
                                            (PA_Unichar *)info.c_str());
                            
                            PA_SetBooleanVariable(&cbparams[1], false);
                            PA_ExecuteCommandByID(1007, cbparams, 4);
                            if(PA_GetBooleanVariable(cbparams[1]))
                            {
                                /* abort */
                                result = CURLE_ABORTED_BY_CALLBACK;
                                goto curl_abort_transfer;
                            }
                        }
                    }
                }else
                {
                    PA_YieldAbsolute();
                }

                PA_Variable params;
                bool isProcessDying = PA_GetBooleanVariable(PA_ExecuteCommandByID(672/* Process aborted */, &params, 0));
                /* PA_IsProcessDying is not threadSafe */
                
                if(isProcessDying)
                {
                    /* abort (runtime explorer, not debugger) */
                    result = CURLE_ABORTED_BY_CALLBACK;
                    goto curl_abort_transfer;
                }
                
            }
                break;
        }
        
    }while((running_handles));
    
curl_abort_transfer:
    
    PA_ClearVariable(&cbparams[0]);
    PA_ClearVariable(&cbparams[1]);
    PA_ClearVariable(&cbparams[2]);
    PA_ClearVariable(&cbparams[3]);
    
    struct CURLMsg *m;
    int msgq = 0;
    
    if(1)
    {
        std::lock_guard<std::mutex> lock(mutexMcurl);
        
        m = curl_multi_info_read(mcurl, &msgq);
        if(m && (m->msg == CURLMSG_DONE))
        {
            result = m->data.result;
        }
        
        if(!Param4.getUTF16Length())
        {
            curl_get_info(curl, info);
            Param4.setUTF16String(&info);
        }
        
        curl_multi_remove_handle(mcurl, curl);
    }
    
    return result;
}


#pragma mark function

size_t curl_read_function(void *buffer,
                          size_t size,
                          size_t nmemb,
                          http_ctx *ctx)
{
    size_t len = size * nmemb;
    
    if(ctx->size)
    {
        FILE *f;
        
        f = CPathOpen (ctx->path, CPathRead);
        
        if(f)
        {
            fseek(f, ctx->pos, SEEK_SET);
            len = fread(buffer, size, nmemb, f);
            ctx->pos += len;
            fclose(f);
        }else
        {
            len = 0;
        }
    }else
    {
        const uint8_t *ptr = ctx->data->getBytesPtrForSize((uint32_t *)&len);
        if(ptr) memcpy(buffer, ptr, len);
    }
    
    return len;
}

size_t curl_header_function(char *buffer,
                            size_t size,
                            size_t nmemb,
                            http_ctx *ctx)
{
    size_t len = size * nmemb;
    ctx->data->addBytes((const uint8_t *)buffer, len);
    
    return len;
}

size_t curl_debug_function(CURL *curl,
                           curl_infotype type,
                           char *data,
                           size_t size,
                           http_debug_ctx *ctx)
{

#if VERSIONMAC
    std::string path;
    path = (const char *)ctx->path;
#else
    std::wstring path;
    path = (const wchar_t *)ctx->path;
#endif
    
    curl_off_t  *f_size = NULL;
    
    switch (type)
    {
        case CURLINFO_TEXT:
            path += LOG_CURLINFO_TEXT;
            f_size = &ctx->size_CURLINFO_TEXT;
            break;
        case CURLINFO_HEADER_IN:
            path += LOG_CURLINFO_HEADER_IN;
            f_size = &ctx->size_CURLINFO_HEADER_IN;
            break;
        case CURLINFO_HEADER_OUT:
            path += LOG_CURLINFO_HEADER_OUT;
            f_size = &ctx->size_CURLINFO_HEADER_OUT;
            break;
        case CURLINFO_DATA_IN:
            path += LOG_CURLINFO_DATA_IN;
            f_size = &ctx->size_CURLINFO_DATA_IN;
            break;
        case CURLINFO_DATA_OUT:
            path += LOG_CURLINFO_DATA_OUT;
            f_size = &ctx->size_CURLINFO_DATA_OUT;
            break;
        case CURLINFO_SSL_DATA_OUT:
            path += LOG_CURLINFO_SSL_DATA_IN;
            f_size = &ctx->size_CURLINFO_SSL_DATA_IN;
            break;
        case CURLINFO_SSL_DATA_IN:
            path += LOG_CURLINFO_SSL_DATA_OUT;
            f_size = &ctx->size_CURLINFO_SSL_DATA_OUT;
            break;
    }

    create_parent_folder((path_t *)path.c_str());
    FILE *f = CPathOpen ((path_t *)path.c_str(), *f_size ? CPathAppend : CPathCreate);
    
    if(f)
    {
        *f_size += size;
        fwrite(data, size, sizeof(char), f);
        fclose(f);
    }

    return 0;
}

size_t curl_write_function(void *buffer,
                           size_t size,
                           size_t nmemb,
                           http_ctx *ctx)
{
    size_t len = size * nmemb;
    
    if(ctx->use_path)
    {
        create_parent_folder((path_t *)ctx->path);
        FILE *f = CPathOpen (ctx->path, ctx->size ? CPathAppend : CPathCreate);
        
        if(f)
        {
            ctx->size += len;
            fwrite(buffer, size, nmemb, f);
            fclose(f);
        }else
        {
            len = 0;
        }
        
    }else
    {
        ctx->data->addBytes((const uint8_t *)buffer, len);
    }
    
    return len;
}

#pragma mark tools

void cURL_Escape(PA_PluginParameters params)
{
    C_TEXT Param1;
    C_TEXT returnValue;
    
    PackagePtr pParams = (PackagePtr)params->fParameters;
    Param1.fromParamAtIndex(pParams, 1);
    
    CURL *curl = curl_easy_init();
    
    if(curl)
    {
        CUTF8String srcUrl;
        Param1.copyUTF8String(&srcUrl);
        
        char *escapedUrl = curl_easy_escape(curl, (char *)srcUrl.c_str(), (int)srcUrl.size());
        
        if(escapedUrl)
        {
            CUTF8String dstUrl;
            dstUrl = CUTF8String((const uint8_t *)escapedUrl);
            returnValue.setUTF8String(&dstUrl);
            curl_free(escapedUrl);
        }

        curl_easy_cleanup(curl);
    }

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
	returnValue.setReturn(pResult);
}

void cURL_Unescape(PA_PluginParameters params)
{
    C_TEXT Param1;
    C_TEXT returnValue;
    
    PackagePtr pParams = (PackagePtr)params->fParameters;
    Param1.fromParamAtIndex(pParams, 1);
    
    CURL *curl = curl_easy_init();
    
    if(curl)
    {
        CUTF8String srcUrl;
        Param1.copyUTF8String(&srcUrl);
        
        int outLength;
        char *escapedUrl = curl_easy_unescape(curl, (char *)srcUrl.c_str(), (int)srcUrl.size(), &outLength);
        
        if(escapedUrl)
        {
            CUTF8String dstUrl;
            dstUrl = CUTF8String((const uint8_t *)escapedUrl, outLength);
            returnValue.setUTF8String(&dstUrl);
            curl_free(escapedUrl);
        }

        curl_easy_cleanup(curl);
    }

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
	returnValue.setReturn(pResult);
}

void cURL_GetDate(PA_PluginParameters params)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;

    PackagePtr pParams = (PackagePtr)params->fParameters;
	Param1.fromParamAtIndex(pParams, 1);
    
    CUTF8String datestring;
    Param1.copyUTF8String(&datestring);
    
    time_t date = curl_getdate((char *)datestring.c_str(), NULL);
    returnValue.setIntValue((int)date < 0 || date < 0  ? -1 : date);
    
    if(date != -1)
    {
        std::vector<uint8_t> buf(20);
        memset((char *)&buf[0], 0, buf.size());
#if VERSIONMAC
        sprintf((char *)&buf[0], "%ld", date);
#else
        sprintf_s((char *)&buf[0], 20, "%ld", date);
#endif
        Param2.setUTF8String((const uint8_t *)&buf[0], strlen((const char *)&buf[0]));
    }

	Param2.toParamAtIndex(pParams, 2);
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
	returnValue.setReturn(pResult);
}

void cURL_VersionInfo(PA_PluginParameters params)
{
    C_TEXT returnValue;
    CUTF16String json;
    
    curl_version_info_data *d = curl_version_info(CURLVERSION_NOW);
    
#if USE_JSONCPP
    Json::Value info;
    
    if(d->age >= 0)
    {
        info["version"] = d->version;
        info["version_num"] = d->version_num;
        info["host"] = d->host;
        info["features"] = d->features;
        info["ssl_version"] = d->ssl_version;
        info["ssl_version_num"] = (Json::Int)d->ssl_version_num;
        info["libz_version"] = d->libz_version;

        Json::Value protocols;
        Json::ArrayIndex i = 0;
        
        if(d->protocols)
        {
            size_t n = 0;
            size_t nproto = 0;
            while(d->protocols[nproto])
            {
                const char *protocol = d->protocols[nproto];
                size_t len = strlen(protocol);
                if(len)
                {
                    protocols[i++] = protocol;
                    
                    n += len;
                    n += ++nproto;
                }
            }
        }
        info["protocols"] = protocols;
    }
    if(d->age >= 1)
    {

    }
    if(d->age >= 2)
    {
        if(d->libidn)
        {
            info["libidn"] = d->libidn;
        }
    }
    if(d->age >= 3)
    {
        if(d->libssh_version)
        {
            info["libssh_version"] = d->libssh_version;
        }
    }
    if(d->age >= 4)
    {

    }
    
    Json::StyledWriter writer;
    std::string options = writer.write(info);
    convertFromString(options, json);
#else
    std::lock_guard<std::mutex> lock(mutexJson);
    
    JSONNODE *info = json_new(JSON_NODE);
    
    if(d->age >= 0)
    {
        json_set_s_for_key(info, L"version", d->version);
        json_set_i_for_key(info, L"version_num", d->version_num);
        json_set_s_for_key(info, L"host", d->host);
        json_set_i_for_key(info, L"features", d->features);
        json_set_s_for_key(info, L"ssl_version", d->ssl_version);
        json_set_i_for_key(info, L"ssl_version_num", d->ssl_version_num);
        json_set_s_for_key(info, L"libz_version", d->libz_version);
        
        JSONNODE *protocols = json_new(JSON_ARRAY);
        
        if(d->protocols)
        {
            size_t n = 0;
            size_t nproto = 0;
            while(d->protocols[nproto])
            {
                const char *protocol = d->protocols[nproto];
                size_t len = strlen(protocol);
                if(len)
                {
                    json_push_back_s(protocols, protocol);
                    n += len;
                    n += ++nproto;
                }
            }
        }
        json_set_name(protocols, L"protocols");
        json_push_back(info, protocols);
    }
    if(d->age >= 1)
    {
        //        if(d->ares)
        //        {
        //            json_set_s_for_key(info, L"ares", d->ares);
        //            json_set_i_for_key(info, L"ares_num", d->ares_num);
        //        }
    }
    if(d->age >= 2)
    {
        if(d->libidn)
        {
            json_set_s_for_key(info, L"libidn", d->libidn);
        }
    }
    if(d->age >= 3)
    {
        if(d->libssh_version)
        {
            json_set_s_for_key(info, L"libssh_version", d->libssh_version);
            //            json_set_i_for_key(info, L"iconv_ver_num", d->iconv_ver_num);
        }
    }
    if(d->age >= 4)
    {
        //        if(d->brotli_version)
        //        {
        //            json_set_s_for_key(info, L"brotli_version", d->brotli_version);
        //            json_set_i_for_key(info, L"brotli_ver_num", d->brotli_ver_num);
        //        }
    }
    
    json_stringify(info, json, FALSE);
    
    json_delete(info);
#endif
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    returnValue.setUTF16String(&json);
    returnValue.setReturn(pResult);
}

#pragma mark main

BOOL curl_set_debug_option(CURL *curl,
                           C_TEXT& Param1,
                           CPathString& debug_folder_path)
{
    BOOL isDebugEnabled = FALSE;
    CUTF8String Param1_u8;
    Param1.copyUTF8String(&Param1_u8);

#if USE_JSONCPP
    Json::Value root;
    Json::CharReaderBuilder builder;
    std::string errors;
    
    Json::CharReader *reader = builder.newCharReader();
    bool parse = reader->parse((const char *)Param1_u8.c_str(),
                               (const char *)Param1_u8.c_str() + Param1_u8.size(),
                               &root,
                               &errors);
    delete reader;
    
    if(parse)
    {
        if(root.isObject())
        {
            for(Json::Value::const_iterator it = root.begin() ; it != root.end() ; it++)
            {
                Json::Value key = it.key();
                JSONCPP_STRING name = it.name();
                
                if(name == "DEBUG")
                {
                    if(it->isString())
                    {
                        std::string path;
                        path = it->asString();
                        
                        if(path.length())
                        {
                            C_TEXT t;
                            t.setUTF8String((const uint8_t *)path.c_str(), path.length());
#if VERSIONMAC
                            CUTF8String _path;
                            t.copyPath(&_path);
                            debug_folder_path = (const uint8_t *)_path.c_str();
                            if(debug_folder_path.at(debug_folder_path.size() - 1) != '/') debug_folder_path += '/';
#else
                            CUTF16String _path;
                            t.copyUTF16String(&_path);
                            debug_folder_path = (const PA_Unichar *)_path.c_str();
                            if(debug_folder_path.at(debug_folder_path.size() - 1) != L'\\') debug_folder_path += L'\\';
#endif
                            isDebugEnabled = TRUE;
                        }
                    }
                    break;
                }
            }
        }
    }
#else
    std::wstring Param1_option;
    json_wconv((const char *)Param1_u8.c_str(), Param1_option);
    
    std::lock_guard<std::mutex> lock(mutexJson);
    
    JSONNODE *option = json_parse(Param1_option.c_str());
    
    if(option)
    {
        if (json_type(option) == JSON_NODE)
        {
            CURLoption curl_option;
            /* get the url first */
            CUTF8String path;
            JSONNODE_ITERATOR i = json_begin(option);
            
            while (i != json_end(option))
            {
                curl_option = json_get_curl_option_name(*i);
                if(curl_option == CURLOPT_VERBOSE)
                {
                    json_char *value = json_as_string(*i);
                    
                    if(value)
                    {
#if VERSIONMAC
                        CUTF16String path;
                        json_wconv(value, &path);
                        C_TEXT t;
                        t.setUTF16String(&path);
                        CUTF8String _path;
                        t.copyPath(&_path);
                        debug_folder_path = (const uint8_t *)_path.c_str();
                        if(debug_folder_path.at(debug_folder_path.size() - 1) != '/') debug_folder_path += '/';
#else
                        debug_folder_path = (const PA_Unichar *)value;
                        if(debug_folder_path.at(debug_folder_path.size() - 1) != L'\\') debug_folder_path += L'\\';
#endif
                        isDebugEnabled = TRUE;
                        
                        json_free(value);
                    }
                    break;
                }
                ++i;
            }
            
        }
        json_delete(option);
    }
#endif
    
    return isDebugEnabled;
}

BOOL curl_set_options(CURL *curl,
                      C_TEXT& Param1,
                      CPathString& request_path,
                      CPathString& response_path,
                      C_TEXT& userInfo,
                      struct curl_slist *curl_slist_connect_to,
                      struct curl_slist *curl_slist_proxy_header,
                      struct curl_slist *curl_slist_http_header,
                      struct curl_slist *curl_slist_http_200_aliases,
                      struct curl_slist *curl_slist_resolve,
                      struct curl_slist *curl_slist_mail_rcpt,
                      struct curl_slist *curl_slist_mail_from,
                      struct curl_slist *curl_slist_prequote,
                      struct curl_slist *curl_slist_postquote,
                      struct curl_slist *curl_slist_quote,
                      struct curl_slist *curl_slist_telnet_options)
{
    BOOL isAtomic = FALSE;
    CUTF8String Param1_u8;
    Param1.copyUTF8String(&Param1_u8);
    
#if USE_JSONCPP
    Json::Value root;
    Json::CharReaderBuilder builder;
    std::string errors;
    
    Json::CharReader *reader = builder.newCharReader();
    bool parse = reader->parse((const char *)Param1_u8.c_str(),
                               (const char *)Param1_u8.c_str() + Param1_u8.size(),
                               &root,
                               &errors);
    delete reader;
    
    if(parse)
    {
        if(root.isObject())
        {
            std::string url;
            /* get the url first */
            for(Json::Value::const_iterator it = root.begin() ; it != root.end() ; it++)
            {
                Json::Value key = it.key();
                JSONCPP_STRING name = it.name();
                
                if(name == "URL")
                {
                    if(it->isString())
                    {
                        url = it->asString();
                        if(url.length())
                        {
                            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
                            break;
                        }
                    }
                }
            }/* url */
            for(Json::Value::const_iterator it = root.begin() ; it != root.end() ; it++)
            {
                Json::Value key = it.key();
                JSONCPP_STRING name = it.name();
                
                CURLoption curl_option = json_get_curl_option_name(it);
                
                switch (curl_option)
                {
                        /* special string */
                    case CURLOPT_READDATA:
                    {
                        JSONCPP_STRING value = it->asString();
#if VERSIONMAC
                        C_TEXT t;
                        t.setUTF8String((const uint8_t *)value.c_str(), value.length());
                        CUTF8String _path;
                        t.copyPath(&_path);
                        request_path = (const uint8_t *)_path.c_str();
#else
						C_TEXT t;
						t.setUTF8String((const uint8_t *)value.c_str(), value.length());
						CUTF16String _path;
						t.copyUTF16String(&_path);
                        request_path = (const PA_Unichar *)value.c_str();
#endif
                    }
                        break;
                    case CURLOPT_WRITEDATA:
                    {
                        JSONCPP_STRING value = it->asString();
#if VERSIONMAC
                        C_TEXT t;
                        t.setUTF8String((const uint8_t *)value.c_str(), value.length());
                        CUTF8String _path;
                        t.copyPath(&_path);
                        response_path = (const uint8_t *)_path.c_str();
#else
						C_TEXT t;
						t.setUTF8String((const uint8_t *)value.c_str(), value.length());
						CUTF16String _path;
						t.copyUTF16String(&_path);
						response_path = (const PA_Unichar *)value.c_str();
#endif
                    }
                        break;
                    case CURLOPT_AUTOPROXY:
                    {
                        std::lock_guard<std::mutex> lock(mutexPf);
                        
                        char **proxies = px_proxy_factory_get_proxies(pf, (const char *)url.c_str());
                        
                        if(proxies)
                        {
                            for (unsigned int j = 0; proxies[j]; ++j)
                            {
                                if (!strncmp("direct://", proxies[j], 9))
                                    continue;
                                
                                curl_easy_setopt(curl, CURLOPT_PROXY, proxies[j]);
                                
                                if (!strncmp("https", proxies[j], 5))
                                    curl_easy_setopt(curl, CURLOPT_PROXYTYPE, CURLPROXY_HTTPS);
                                
                                else if (!strncmp("http", proxies[j], 4))
                                    curl_easy_setopt(curl, CURLOPT_PROXYTYPE, CURLPROXY_HTTP);
                                
                                else if (!strncmp("socks4", proxies[j], 5))
                                    curl_easy_setopt(curl, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS4);
                                
                                else if (!strncmp("socks5", proxies[j], 5))
                                    curl_easy_setopt(curl, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5);
                            }
                            
                        }
                        px_proxy_factory_free_proxies(proxies);
                    }
                        break;
                    case CURLOPT_PRIVATE:
                    {
                        JSONCPP_STRING value = it->asString();
                        userInfo.setUTF8String((const uint8_t *)value.c_str(), value.length());
                    }
                        break;
                    case CURLOPT_ATOMIC:
                        isAtomic = it->asBool();
                        break;
                        /* string */
                    case CURLOPT_PROXY:
                    case CURLOPT_USERPWD:
                    case CURLOPT_PROXYUSERPWD:
                    case CURLOPT_RANGE:
                    case CURLOPT_REFERER:
                    case CURLOPT_FTPPORT:
                    case CURLOPT_USERAGENT:
                    case CURLOPT_COOKIE:
                    case CURLOPT_KEYPASSWD:
                    case CURLOPT_CUSTOMREQUEST:
                    case CURLOPT_INTERFACE:
                    case CURLOPT_KRBLEVEL:
                    case CURLOPT_RANDOM_FILE:
                    case CURLOPT_EGDSOCKET:
                    case CURLOPT_SSL_CIPHER_LIST:
                    case CURLOPT_SSLCERTTYPE:
                    case CURLOPT_SSLKEYTYPE:
                    case CURLOPT_ACCEPT_ENCODING:
                    case CURLOPT_FTP_ACCOUNT:
                    case CURLOPT_COOKIELIST:
                    case CURLOPT_FTP_ALTERNATIVE_TO_USER:
                    case CURLOPT_SSH_HOST_PUBLIC_KEY_MD5:
                    case CURLOPT_USERNAME:
                    case CURLOPT_PASSWORD:
                    case CURLOPT_PROXYUSERNAME:
                    case CURLOPT_PROXYPASSWORD:
                    case CURLOPT_NOPROXY:
                    case CURLOPT_SSH_KNOWNHOSTS:
                    case CURLOPT_RTSP_SESSION_ID:
                    case CURLOPT_RTSP_STREAM_URI:
                    case CURLOPT_RTSP_TRANSPORT:
                    case CURLOPT_TLSAUTH_USERNAME:
                    case CURLOPT_TLSAUTH_PASSWORD:
                    case CURLOPT_TLSAUTH_TYPE:
                    case CURLOPT_DNS_SERVERS:
                    case CURLOPT_MAIL_AUTH:
                    case CURLOPT_XOAUTH2_BEARER:
                    case CURLOPT_DNS_INTERFACE:
                    case CURLOPT_DNS_LOCAL_IP4:
                    case CURLOPT_DNS_LOCAL_IP6:
                    case CURLOPT_LOGIN_OPTIONS:
                    case CURLOPT_PROXY_SERVICE_NAME:
                    case CURLOPT_SERVICE_NAME:
                    case CURLOPT_DEFAULT_PROTOCOL:
                    case CURLOPT_PROXY_TLSAUTH_USERNAME:
                    case CURLOPT_PROXY_TLSAUTH_PASSWORD:
                    case CURLOPT_PROXY_TLSAUTH_TYPE:
                    case CURLOPT_PROXY_SSLCERTTYPE:
                    case CURLOPT_PROXY_SSLKEYTYPE:
                    case CURLOPT_PROXY_KEYPASSWD:
                    case CURLOPT_PROXY_SSL_CIPHER_LIST:
                    case CURLOPT_PRE_PROXY:
                    case CURLOPT_PROXY_PINNEDPUBLICKEY:
                    case CURLOPT_REQUEST_TARGET:
                    case CURLOPT_TLS13_CIPHERS:
                    case CURLOPT_PROXY_TLS13_CIPHERS:
                    case CURLOPT_DOH_URL:
                    case CURLOPT_MAIL_FROM:
                    {
                        JSONCPP_STRING value = it->asString();
                        curl_easy_setopt(curl, curl_option, value.c_str());
                    }
                        break;
                        /* path */
                    case CURLOPT_SSLCERT:
                    case CURLOPT_COOKIEFILE:
                    case CURLOPT_CAINFO:
                    case CURLOPT_COOKIEJAR:
                    case CURLOPT_SSLKEY:
                    case CURLOPT_CAPATH:
                    case CURLOPT_NETRC_FILE:
                    case CURLOPT_SSH_PUBLIC_KEYFILE:
                    case CURLOPT_SSH_PRIVATE_KEYFILE:
                    case CURLOPT_CRLFILE:
                    case CURLOPT_ISSUERCERT:
                    case CURLOPT_PROXY_CAINFO:
                    case CURLOPT_PROXY_CAPATH:
                    case CURLOPT_PROXY_SSLCERT:
                    case CURLOPT_PROXY_SSLKEY:
                    case CURLOPT_PROXY_CRLFILE:
                    {
                        JSONCPP_STRING value = it->asString();
#if VERSIONMAC
                        /* hfs to posix */
                        C_TEXT t;
                        t.setUTF8String((const uint8_t *)value.c_str(), value.length());
                        CUTF8String u;
                        t.copyPath(&u);
                        curl_easy_setopt(curl, curl_option, (const char *)u.c_str());
#else
                        curl_easy_setopt(curl, curl_option, value.c_str());
#endif
                    }
                        break;
                        
                        /* path or value */
                    case CURLOPT_PINNEDPUBLICKEY:
                    {
                        JSONCPP_STRING value = it->asString();
                        if (value.find_first_of("sha256//") == std::string::npos)
                        {
#if VERSIONMAC
                            /* hfs to posix */
                            C_TEXT t;
                            t.setUTF8String((const uint8_t *)value.c_str(), value.length());
                            CUTF8String u;
                            t.copyPath(&u);
                            curl_easy_setopt(curl, curl_option, (const char *)u.c_str());
#else
                            curl_easy_setopt(curl, curl_option, value.c_str());
#endif
                        }else
                        {
                            curl_easy_setopt(curl, curl_option, value.c_str());
                        }
                    }
                        break;
                        
                        /* longint */
                    case CURLOPT_PORT:
                    case CURLOPT_TIMEOUT:
                    case CURLOPT_LOW_SPEED_LIMIT:
                    case CURLOPT_LOW_SPEED_TIME:
                    case CURLOPT_RESUME_FROM:
                    case CURLOPT_CRLF:
                    case CURLOPT_TIMEVALUE:
                    case CURLOPT_HEADER:
                    case CURLOPT_NOBODY:
                    case CURLOPT_FAILONERROR:
                    case CURLOPT_UPLOAD:
                    case CURLOPT_POST:
                    case CURLOPT_DIRLISTONLY:
                    case CURLOPT_APPEND:
                    case CURLOPT_NETRC:
                    case CURLOPT_FOLLOWLOCATION:
                    case CURLOPT_PUT:
                    case CURLOPT_AUTOREFERER:
                    case CURLOPT_PROXYPORT:
                    case CURLOPT_HTTPPROXYTUNNEL:
                    case CURLOPT_SSL_VERIFYPEER:
                    case CURLOPT_MAXREDIRS:
                    case CURLOPT_FILETIME:
                    case CURLOPT_MAXCONNECTS:
                    case CURLOPT_FRESH_CONNECT:
                    case CURLOPT_FORBID_REUSE:
                    case CURLOPT_CONNECTTIMEOUT:
                    case CURLOPT_HTTPGET:
                    case CURLOPT_SSL_VERIFYHOST:
                    case CURLOPT_FTP_USE_EPSV:
                    case CURLOPT_DNS_CACHE_TIMEOUT:
                    case CURLOPT_COOKIESESSION:
                    case CURLOPT_BUFFERSIZE:
                    case CURLOPT_UNRESTRICTED_AUTH:
                    case CURLOPT_FTP_USE_EPRT:
                    case CURLOPT_HTTPAUTH:
                    case CURLOPT_FTP_CREATE_MISSING_DIRS:
                    case CURLOPT_PROXYAUTH:
                    case CURLOPT_FTP_RESPONSE_TIMEOUT:
                    case CURLOPT_IPRESOLVE:
                    case CURLOPT_MAXFILESIZE:
                    case CURLOPT_IGNORE_CONTENT_LENGTH:
                    case CURLOPT_FTP_SKIP_PASV_IP:
                    case CURLOPT_FTP_FILEMETHOD:
                    case CURLOPT_LOCALPORT:
                    case CURLOPT_LOCALPORTRANGE:
                    case CURLOPT_CONNECT_ONLY:
                    case CURLOPT_SSL_SESSIONID_CACHE:
                    case CURLOPT_SSH_AUTH_TYPES:
                    case CURLOPT_FTP_SSL_CCC:
                    case CURLOPT_TIMEOUT_MS:
                    case CURLOPT_CONNECTTIMEOUT_MS:
                    case CURLOPT_HTTP_TRANSFER_DECODING:
                    case CURLOPT_HTTP_CONTENT_DECODING:
                    case CURLOPT_NEW_FILE_PERMS:
                    case CURLOPT_NEW_DIRECTORY_PERMS:
                    case CURLOPT_POSTREDIR:
                    case CURLOPT_PROXY_TRANSFER_MODE:
                    case CURLOPT_ADDRESS_SCOPE:
                    case CURLOPT_CERTINFO:
                    case CURLOPT_TFTP_BLKSIZE:
                    case CURLOPT_PROTOCOLS:
                    case CURLOPT_REDIR_PROTOCOLS:
                    case CURLOPT_FTP_USE_PRET:
                    case CURLOPT_RTSP_REQUEST:
                    case CURLOPT_RTSP_CLIENT_CSEQ:
                    case CURLOPT_RTSP_SERVER_CSEQ:
                    case CURLOPT_WILDCARDMATCH:
                    case CURLOPT_TRANSFER_ENCODING:
                    case CURLOPT_ACCEPTTIMEOUT_MS:
                    case CURLOPT_TCP_KEEPALIVE:
                    case CURLOPT_TCP_KEEPIDLE:
                    case CURLOPT_TCP_KEEPINTVL:
                    case CURLOPT_SASL_IR:
                    case CURLOPT_SSL_ENABLE_NPN:
                    case CURLOPT_SSL_ENABLE_ALPN:
                    case CURLOPT_EXPECT_100_TIMEOUT_MS:
                    case CURLOPT_SSL_VERIFYSTATUS:
                    case CURLOPT_SSL_FALSESTART:
                    case CURLOPT_PATH_AS_IS:
                    case CURLOPT_PIPEWAIT:
                    case CURLOPT_STREAM_WEIGHT:
                    case CURLOPT_TFTP_NO_OPTIONS:
                    case CURLOPT_TCP_FASTOPEN:
                    case CURLOPT_KEEP_SENDING_ON_ERROR:
                    case CURLOPT_PROXY_SSL_VERIFYPEER:
                    case CURLOPT_PROXY_SSL_VERIFYHOST:
                    case CURLOPT_PROXY_SSL_OPTIONS:
                    case CURLOPT_SUPPRESS_CONNECT_HEADERS:
                    case CURLOPT_SOCKS5_AUTH:
                    case CURLOPT_SSH_COMPRESSION:
                    case CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS:
                    case CURLOPT_HAPROXYPROTOCOL:
                    case CURLOPT_DNS_SHUFFLE_ADDRESSES:
                    case CURLOPT_DISALLOW_USERNAME_IN_URL:
                    case CURLOPT_UPLOAD_BUFFERSIZE:
                    case CURLOPT_UPKEEP_INTERVAL_MS:
                        if(it->isNumeric())
                        {
                            curl_easy_setopt(curl, curl_option, it->asInt());
                        }else if(it->isString())
                        {
                            curl_easy_setopt(curl, curl_option, atoi(it->asString().c_str()));
                        }
                        break;
                        /* constant or long */
                    case CURLOPT_USE_SSL:
                    case CURLOPT_SSLVERSION:
                    case CURLOPT_HTTP_VERSION:
                    case CURLOPT_PROXY_SSLVERSION:
                    case CURLOPT_TIMECONDITION:
                    case CURLOPT_PROXYTYPE:
                    case CURLOPT_FTPSSLAUTH:
                    case CURLOPT_HEADEROPT:
                    {
                        curl_easy_setopt(curl, curl_option, json_get_curl_option_value(it));
                    }
                        break;
                        
                        /* array string */
                    case CURLOPT_CONNECT_TO:
                        json_get_curl_option_v(curl, curl_option, it, curl_slist_connect_to);
                        break;
                    case CURLOPT_PROXYHEADER:
                        json_get_curl_option_v(curl, curl_option, it, curl_slist_proxy_header);
                        break;
                    case CURLOPT_HTTPHEADER:
                        json_get_curl_option_v(curl, curl_option, it, curl_slist_http_header);
                        break;
                    case CURLOPT_HTTP200ALIASES:
                        json_get_curl_option_v(curl, curl_option, it, curl_slist_http_200_aliases);
                        break;
                    case CURLOPT_RESOLVE:
                        json_get_curl_option_v(curl, curl_option, it, curl_slist_resolve);
                        break;
                    case CURLOPT_MAIL_RCPT:
                        json_get_curl_option_v(curl, curl_option, it, curl_slist_mail_rcpt);
                        break;
                    case CURLOPT_PREQUOTE:
                        json_get_curl_option_v(curl, curl_option, it, curl_slist_prequote);
                        break;
                    case CURLOPT_POSTQUOTE:
                        json_get_curl_option_v(curl, curl_option, it, curl_slist_postquote);
                        break;
                    case CURLOPT_QUOTE:
                        json_get_curl_option_v(curl, curl_option, it, curl_slist_quote);
                        break;
                    case CURLOPT_TELNETOPTIONS:
                        json_get_curl_option_v(curl, curl_option, it, curl_slist_telnet_options);
                        break;
                        
                    default:
                        break;
                }
            }
        }
    }
#else
    std::wstring Param1_option;
    json_wconv((const char *)Param1_u8.c_str(), Param1_option);
    
    std::lock_guard<std::mutex> lock(mutexJson);
    
    JSONNODE *option = json_parse(Param1_option.c_str());
    
    if(option)
    {
        if (json_type(option) == JSON_NODE)
        {
            CURLoption curl_option;
            /* get the url first */
            CUTF8String url;
            JSONNODE_ITERATOR i = json_begin(option);
            
            while (i != json_end(option))
            {
                curl_option = json_get_curl_option_name(*i);
                if(curl_option == CURLOPT_URL)
                {
                    json_char *value = json_as_string(*i);
                    
                    if(value)
                    {
                        json_wconv(value, &url);
                        curl_easy_setopt(curl, curl_option, url.c_str());
                        json_free(value);
                    }
                    break;
                }
                
                ++i;
            }
            
            i = json_begin(option);
            while (i != json_end(option))
            {
                json_char *value;
                curl_option = json_get_curl_option_name(*i);
                switch (curl_option)
                {
                        /* special string */
                    case CURLOPT_READDATA:
                        value = json_as_string(*i);
                        if(value)
                        {
#if VERSIONMAC
                            CUTF16String path;
                            json_wconv(value, &path);
                            C_TEXT t;
                            t.setUTF16String(&path);
                            CUTF8String _path;
                            t.copyPath(&_path);
                            request_path = (const uint8_t *)_path.c_str();
#else
                            request_path = (const PA_Unichar *)value;
#endif
                            json_free(value);
                        }
                        break;
                    case CURLOPT_WRITEDATA:
                        value = json_as_string(*i);
                        if(value)
                        {
#if VERSIONMAC
                            CUTF16String path;
                            json_wconv(value, &path);
                            C_TEXT t;
                            t.setUTF16String(&path);
                            CUTF8String _path;
                            t.copyPath(&_path);
                            response_path = (const uint8_t *)_path.c_str();
#else
                            response_path = (const PA_Unichar *)value;
#endif
                            json_free(value);
                        }
                        break;
                    case CURLOPT_AUTOPROXY:
                    {
                        std::lock_guard<std::mutex> lock(mutexPf);
                        
                        char **proxies = px_proxy_factory_get_proxies(pf, (const char *)url.c_str());
                        
                        if(proxies)
                        {
                            for (unsigned int j = 0; proxies[j]; ++j)
                            {
                                if (!strncmp("direct://", proxies[j], 9))
                                    continue;
                                
                                curl_easy_setopt(curl, CURLOPT_PROXY, proxies[j]);
                                
                                if (!strncmp("https", proxies[j], 5))
                                    curl_easy_setopt(curl, CURLOPT_PROXYTYPE, CURLPROXY_HTTPS);
                                
                                else if (!strncmp("http", proxies[j], 4))
                                    curl_easy_setopt(curl, CURLOPT_PROXYTYPE, CURLPROXY_HTTP);
                                
                                else if (!strncmp("socks4", proxies[j], 5))
                                    curl_easy_setopt(curl, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS4);
                                
                                else if (!strncmp("socks5", proxies[j], 5))
                                    curl_easy_setopt(curl, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5);
                            }
                            
                        }
                        px_proxy_factory_free_proxies(proxies);
                    }
                        break;
                    case CURLOPT_PRIVATE:
                    {
                        json_char *value = json_as_string(*i);
                        if(value)
                        {
                            CUTF8String u;
                            json_wconv(value, &u);
                            userInfo.setUTF8String(&u);
                            json_free(value);
                        }
                    }
                        break;
                    case CURLOPT_ATOMIC:
                        isAtomic = json_as_int(*i);
                        break;
                        
                        /* string */
                    case CURLOPT_PROXY:
                    case CURLOPT_USERPWD:
                    case CURLOPT_PROXYUSERPWD:
                    case CURLOPT_RANGE:
                    case CURLOPT_REFERER:
                    case CURLOPT_FTPPORT:
                    case CURLOPT_USERAGENT:
                    case CURLOPT_COOKIE:
                    case CURLOPT_KEYPASSWD:
                    case CURLOPT_CUSTOMREQUEST:
                    case CURLOPT_INTERFACE:
                    case CURLOPT_KRBLEVEL:
                    case CURLOPT_RANDOM_FILE:
                    case CURLOPT_EGDSOCKET:
                    case CURLOPT_SSL_CIPHER_LIST:
                    case CURLOPT_SSLCERTTYPE:
                    case CURLOPT_SSLKEYTYPE:
                    case CURLOPT_ACCEPT_ENCODING:
                    case CURLOPT_FTP_ACCOUNT:
                    case CURLOPT_COOKIELIST:
                    case CURLOPT_FTP_ALTERNATIVE_TO_USER:
                    case CURLOPT_SSH_HOST_PUBLIC_KEY_MD5:
                    case CURLOPT_USERNAME:
                    case CURLOPT_PASSWORD:
                    case CURLOPT_PROXYUSERNAME:
                    case CURLOPT_PROXYPASSWORD:
                    case CURLOPT_NOPROXY:
                    case CURLOPT_SSH_KNOWNHOSTS:
                    case CURLOPT_RTSP_SESSION_ID:
                    case CURLOPT_RTSP_STREAM_URI:
                    case CURLOPT_RTSP_TRANSPORT:
                    case CURLOPT_TLSAUTH_USERNAME:
                    case CURLOPT_TLSAUTH_PASSWORD:
                    case CURLOPT_TLSAUTH_TYPE:
                    case CURLOPT_DNS_SERVERS:
                    case CURLOPT_MAIL_AUTH:
                    case CURLOPT_XOAUTH2_BEARER:
                    case CURLOPT_DNS_INTERFACE:
                    case CURLOPT_DNS_LOCAL_IP4:
                    case CURLOPT_DNS_LOCAL_IP6:
                    case CURLOPT_LOGIN_OPTIONS:
                    case CURLOPT_PROXY_SERVICE_NAME:
                    case CURLOPT_SERVICE_NAME:
                    case CURLOPT_DEFAULT_PROTOCOL:
                    case CURLOPT_PROXY_TLSAUTH_USERNAME:
                    case CURLOPT_PROXY_TLSAUTH_PASSWORD:
                    case CURLOPT_PROXY_TLSAUTH_TYPE:
                    case CURLOPT_PROXY_SSLCERTTYPE:
                    case CURLOPT_PROXY_SSLKEYTYPE:
                    case CURLOPT_PROXY_KEYPASSWD:
                    case CURLOPT_PROXY_SSL_CIPHER_LIST:
                    case CURLOPT_PRE_PROXY:
                    case CURLOPT_PROXY_PINNEDPUBLICKEY:
                    case CURLOPT_REQUEST_TARGET:
                    case CURLOPT_TLS13_CIPHERS:
                    case CURLOPT_PROXY_TLS13_CIPHERS:
                    case CURLOPT_DOH_URL:
                        json_get_curl_option_s(curl, curl_option, *i);
                        break;
                        
                        /* path */
                    case CURLOPT_SSLCERT:
                    case CURLOPT_COOKIEFILE:
                    case CURLOPT_CAINFO:
                    case CURLOPT_COOKIEJAR:
                    case CURLOPT_SSLKEY:
                    case CURLOPT_CAPATH:
                    case CURLOPT_NETRC_FILE:
                    case CURLOPT_SSH_PUBLIC_KEYFILE:
                    case CURLOPT_SSH_PRIVATE_KEYFILE:
                    case CURLOPT_CRLFILE:
                    case CURLOPT_ISSUERCERT:
                    case CURLOPT_PROXY_CAINFO:
                    case CURLOPT_PROXY_CAPATH:
                    case CURLOPT_PROXY_SSLCERT:
                    case CURLOPT_PROXY_SSLKEY:
                    case CURLOPT_PROXY_CRLFILE:
                        json_get_curl_option_p(curl, curl_option, *i);
                        break;
                        
                        /* path or value */
                    case CURLOPT_PINNEDPUBLICKEY:
                        json_get_curl_option_k(curl, curl_option, *i);
                        break;
                        
                        /* longint */
                    case CURLOPT_PORT:
                    case CURLOPT_TIMEOUT:
                    case CURLOPT_LOW_SPEED_LIMIT:
                    case CURLOPT_LOW_SPEED_TIME:
                    case CURLOPT_RESUME_FROM:
                    case CURLOPT_CRLF:
                    case CURLOPT_TIMEVALUE:
                    case CURLOPT_HEADER:
                    case CURLOPT_NOBODY:
                    case CURLOPT_FAILONERROR:
                    case CURLOPT_UPLOAD:
                    case CURLOPT_POST:
                    case CURLOPT_DIRLISTONLY:
                    case CURLOPT_APPEND:
                    case CURLOPT_NETRC:
                    case CURLOPT_FOLLOWLOCATION:
                    case CURLOPT_PUT:
                    case CURLOPT_AUTOREFERER:
                    case CURLOPT_PROXYPORT:
                    case CURLOPT_HTTPPROXYTUNNEL:
                    case CURLOPT_SSL_VERIFYPEER:
                    case CURLOPT_MAXREDIRS:
                    case CURLOPT_FILETIME:
                    case CURLOPT_MAXCONNECTS:
                    case CURLOPT_FRESH_CONNECT:
                    case CURLOPT_FORBID_REUSE:
                    case CURLOPT_CONNECTTIMEOUT:
                    case CURLOPT_HTTPGET:
                    case CURLOPT_SSL_VERIFYHOST:
                    case CURLOPT_FTP_USE_EPSV:
                    case CURLOPT_DNS_CACHE_TIMEOUT:
                    case CURLOPT_COOKIESESSION:
                    case CURLOPT_BUFFERSIZE:
                    case CURLOPT_UNRESTRICTED_AUTH:
                    case CURLOPT_FTP_USE_EPRT:
                    case CURLOPT_HTTPAUTH:
                    case CURLOPT_FTP_CREATE_MISSING_DIRS:
                    case CURLOPT_PROXYAUTH:
                    case CURLOPT_FTP_RESPONSE_TIMEOUT:
                    case CURLOPT_IPRESOLVE:
                    case CURLOPT_MAXFILESIZE:
                    case CURLOPT_IGNORE_CONTENT_LENGTH:
                    case CURLOPT_FTP_SKIP_PASV_IP:
                    case CURLOPT_FTP_FILEMETHOD:
                    case CURLOPT_LOCALPORT:
                    case CURLOPT_LOCALPORTRANGE:
                    case CURLOPT_CONNECT_ONLY:
                    case CURLOPT_SSL_SESSIONID_CACHE:
                    case CURLOPT_SSH_AUTH_TYPES:
                    case CURLOPT_FTP_SSL_CCC:
                    case CURLOPT_TIMEOUT_MS:
                    case CURLOPT_CONNECTTIMEOUT_MS:
                    case CURLOPT_HTTP_TRANSFER_DECODING:
                    case CURLOPT_HTTP_CONTENT_DECODING:
                    case CURLOPT_NEW_FILE_PERMS:
                    case CURLOPT_NEW_DIRECTORY_PERMS:
                    case CURLOPT_POSTREDIR:
                    case CURLOPT_PROXY_TRANSFER_MODE:
                    case CURLOPT_ADDRESS_SCOPE:
                    case CURLOPT_CERTINFO:
                    case CURLOPT_TFTP_BLKSIZE:
                    case CURLOPT_PROTOCOLS:
                    case CURLOPT_REDIR_PROTOCOLS:
                    case CURLOPT_FTP_USE_PRET:
                    case CURLOPT_RTSP_REQUEST:
                    case CURLOPT_RTSP_CLIENT_CSEQ:
                    case CURLOPT_RTSP_SERVER_CSEQ:
                    case CURLOPT_WILDCARDMATCH:
                    case CURLOPT_TRANSFER_ENCODING:
                    case CURLOPT_ACCEPTTIMEOUT_MS:
                    case CURLOPT_TCP_KEEPALIVE:
                    case CURLOPT_TCP_KEEPIDLE:
                    case CURLOPT_TCP_KEEPINTVL:
                    case CURLOPT_SASL_IR:
                    case CURLOPT_SSL_ENABLE_NPN:
                    case CURLOPT_SSL_ENABLE_ALPN:
                    case CURLOPT_EXPECT_100_TIMEOUT_MS:
                    case CURLOPT_SSL_VERIFYSTATUS:
                    case CURLOPT_SSL_FALSESTART:
                    case CURLOPT_PATH_AS_IS:
                    case CURLOPT_PIPEWAIT:
                    case CURLOPT_STREAM_WEIGHT:
                    case CURLOPT_TFTP_NO_OPTIONS:
                    case CURLOPT_TCP_FASTOPEN:
                    case CURLOPT_KEEP_SENDING_ON_ERROR:
                    case CURLOPT_PROXY_SSL_VERIFYPEER:
                    case CURLOPT_PROXY_SSL_VERIFYHOST:
                    case CURLOPT_PROXY_SSL_OPTIONS:
                    case CURLOPT_SUPPRESS_CONNECT_HEADERS:
                    case CURLOPT_SOCKS5_AUTH:
                    case CURLOPT_SSH_COMPRESSION:
                    case CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS:
                    case CURLOPT_HAPROXYPROTOCOL:
                    case CURLOPT_DNS_SHUFFLE_ADDRESSES:
                    case CURLOPT_DISALLOW_USERNAME_IN_URL:
                    case CURLOPT_UPLOAD_BUFFERSIZE:
                    case CURLOPT_UPKEEP_INTERVAL_MS:
                        json_get_curl_option_i(curl, curl_option, *i);
                        break;
                        
                        /* constant or long */
                    case CURLOPT_USE_SSL:
                    case CURLOPT_SSLVERSION:
                    case CURLOPT_HTTP_VERSION:
                    case CURLOPT_PROXY_SSLVERSION:
                    case CURLOPT_TIMECONDITION:
                    case CURLOPT_PROXYTYPE:
                    case CURLOPT_FTPSSLAUTH:
                    case CURLOPT_HEADEROPT:
                        json_get_curl_option_c(curl, curl_option, *i);
                        break;
                        
                        /* array string */
                    case CURLOPT_CONNECT_TO:
                        json_get_curl_option_v(curl, curl_option, *i, curl_slist_connect_to);
                        break;
                    case CURLOPT_PROXYHEADER:
                        json_get_curl_option_v(curl, curl_option, *i, curl_slist_proxy_header);
                        break;
                    case CURLOPT_HTTPHEADER:
                        json_get_curl_option_v(curl, curl_option, *i, curl_slist_http_header);
                        break;
                    case CURLOPT_HTTP200ALIASES:
                        json_get_curl_option_v(curl, curl_option, *i, curl_slist_http_200_aliases);
                        break;
                    case CURLOPT_RESOLVE:
                        json_get_curl_option_v(curl, curl_option, *i, curl_slist_resolve);
                        break;
                    case CURLOPT_MAIL_RCPT:
                        json_get_curl_option_v(curl, curl_option, *i, curl_slist_mail_rcpt);
                        break;
                    case CURLOPT_MAIL_FROM:
                        json_get_curl_option_v(curl, curl_option, *i, curl_slist_mail_from);
                        break;
                    case CURLOPT_PREQUOTE:
                        json_get_curl_option_v(curl, curl_option, *i, curl_slist_prequote);
                        break;
                    case CURLOPT_POSTQUOTE:
                        json_get_curl_option_v(curl, curl_option, *i, curl_slist_postquote);
                        break;
                    case CURLOPT_QUOTE:
                        json_get_curl_option_v(curl, curl_option, *i, curl_slist_quote);
                        break;
                    case CURLOPT_TELNETOPTIONS:
                        json_get_curl_option_v(curl, curl_option, *i, curl_slist_telnet_options);
                        break;
                        
                    default:
                        break;
                }
                
                ++i;
            }
            
        }
        json_delete(option);
    }
#endif
    return isAtomic;
}

void _cURL(PA_PluginParameters params)
{
	C_TEXT Param1; /* options */
	C_BLOB Param2; /* request */
	C_BLOB Param3; /* response */
	C_TEXT Param4; /* callbackMethod */
	C_TEXT Param5; /* transferInfo */

	C_TEXT Param6; /* headerInfo */
    C_BLOB Param7;
	C_LONGINT returnValue;

    PackagePtr pParams = (PackagePtr)params->fParameters;
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param4.fromParamAtIndex(pParams, 4);

    CURL *curl = curl_easy_init();
    CURLM *mcurl = gmcurl;//curl_multi_init();

    struct curl_slist *curl_slist_connect_to = NULL;/* CONNECT_TO */
    struct curl_slist *curl_slist_proxy_header = NULL;/* PROXYHEADER */
    struct curl_slist *curl_slist_http_header = NULL;/* HTTPHEADER */
    struct curl_slist *curl_slist_http_200_aliases = NULL;/* HTTP200ALIASES */
    struct curl_slist *curl_slist_resolve = NULL;/* RESOLVE */
    struct curl_slist *curl_slist_mail_rcpt = NULL;/* MAIL_RCPT */
    struct curl_slist *curl_slist_mail_from = NULL;/* MAIL_FROM */
    struct curl_slist *curl_slist_prequote = NULL;/* PREQUOTE */
    struct curl_slist *curl_slist_postquote = NULL;/* POSTQUOTE */
    struct curl_slist *curl_slist_quote = NULL;/* QUOTE */
    struct curl_slist *curl_slist_telnet_options = NULL;/* TELNETOPTIONS */

    C_TEXT userInfo; /* PRIVATE */
    
    CPathString request_path;
    CPathString response_path;
    
    BOOL isAtomic = curl_set_options(curl,
                                     Param1 /* options */,
                                     request_path,
                                     response_path,
                                     userInfo,
                                     curl_slist_connect_to,
                                     curl_slist_proxy_header,
                                     curl_slist_http_header,
                                     curl_slist_http_200_aliases,
                                     curl_slist_resolve,
                                     curl_slist_mail_rcpt,
                                     curl_slist_mail_from,
                                     curl_slist_prequote,
                                     curl_slist_postquote,
                                     curl_slist_quote,
                                     curl_slist_telnet_options);
    
    http_ctx request_ctx;
    request_ctx.pos = 0L;
    request_ctx.data = &Param2; /* request */
    request_ctx.size = 0L;
    request_ctx.use_path = false;
    
    http_ctx response_ctx;
    response_ctx.pos = 0L;
    response_ctx.data = &Param3;/* response */
    response_ctx.size = 0L;
    response_ctx.use_path = false;
    
    http_ctx header_ctx;
    header_ctx.pos = 0L;
    header_ctx.data = &Param7;/* headerInfo */
    header_ctx.size = 0L;
    header_ctx.use_path = false;
    
#if WITH_DEBUG_FUNCTION
    http_debug_ctx debug_ctx;
    
    debug_ctx.size_CURLINFO_TEXT = 0L;
    debug_ctx.size_CURLINFO_HEADER_IN = 0L;
    debug_ctx.size_CURLINFO_HEADER_OUT = 0L;
    debug_ctx.size_CURLINFO_DATA_IN = 0L;
    debug_ctx.size_CURLINFO_DATA_OUT = 0L;
    debug_ctx.size_CURLINFO_SSL_DATA_IN = 0L;
    debug_ctx.size_CURLINFO_SSL_DATA_OUT = 0L;
    
    CPathString debug_folder_path;
    
    if(curl_set_debug_option(curl,
                             Param1 /* options */,
                             debug_folder_path))
    {
#if VERSIONMAC
        debug_ctx.path = (const char *)debug_folder_path.c_str();
#else
        debug_ctx.path = (const wchar_t *)debug_folder_path.c_str();
#endif
        
        curl_easy_setopt(curl, CURLOPT_VERBOSE, 1);
        curl_easy_setopt(curl, CURLOPT_DEBUGDATA, &debug_ctx);
        curl_easy_setopt(curl, CURLOPT_DEBUGFUNCTION, curl_debug_function);
    }
#endif
    
#if VERSIONMAC
    request_ctx.path = (const char *)request_path.c_str();
    response_ctx.path = (const char *)response_path.c_str();
#else
    request_ctx.path = (const wchar_t *)request_path.c_str();
    response_ctx.path = (const wchar_t *)response_path.c_str();
#endif
    
    curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE_LARGE, (curl_off_t)Param2.getBytesLength());
    curl_easy_setopt(curl, CURLOPT_INFILESIZE_LARGE, (curl_off_t)Param2.getBytesLength());
    FILE *f = CPathOpen (request_ctx.path, CPathRead);
    if(f)
    {
        fseek(f, 0L, SEEK_END);
        request_ctx.size = (curl_off_t)ftell(f);
        fclose(f);
        
        if(request_ctx.size != -1L)
        {
            curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE_LARGE, request_ctx.size);
            curl_easy_setopt(curl, CURLOPT_INFILESIZE_LARGE, request_ctx.size);
        }
    }
    
    response_ctx.use_path = response_path.length();
    
    curl_easy_setopt(curl, CURLOPT_READDATA, &request_ctx);
    curl_easy_setopt(curl, CURLOPT_READFUNCTION, curl_read_function);
    
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response_ctx);
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, curl_write_function);
    
    curl_easy_setopt(curl, CURLOPT_HEADERDATA, &header_ctx);
    curl_easy_setopt(curl, CURLOPT_HEADERFUNCTION, curl_header_function);
    
    curl_easy_setopt(curl, CURLOPT_NOPROGRESS, 1L);
    
    if(isAtomic)
    {
        returnValue.setIntValue(curl_perform(curl, Param4 /* callbackMethod */, userInfo));
    }else
    {
        returnValue.setIntValue(curl_perform(mcurl, curl, Param4 /* callbackMethod */, userInfo));
    }
   
    CUTF16String info;
    curl_get_info(curl, info);
    Param5.setUTF16String(&info); /* transferInfo */
    
    /* convert headerInfo Param7:BLOB to Param6:TEXT */
    CUTF8String u8 = CUTF8String(Param7.getBytesPtr(), Param7.getBytesLength());
    Param6.setUTF8String(&u8);
    
    /* cleanup */
    
    if(curl_slist_connect_to)
        curl_slist_free_all(curl_slist_connect_to);
    
    if(curl_slist_proxy_header)
        curl_slist_free_all(curl_slist_proxy_header);
    
    if(curl_slist_http_header)
        curl_slist_free_all(curl_slist_http_header);
    
    if(curl_slist_http_200_aliases)
        curl_slist_free_all(curl_slist_http_200_aliases);
    
    if(curl_slist_resolve)
        curl_slist_free_all(curl_slist_resolve);
    
    if(curl_slist_mail_rcpt)
        curl_slist_free_all(curl_slist_mail_rcpt);
    
    if(curl_slist_mail_from)
        curl_slist_free_all(curl_slist_mail_from);
    
    if(curl_slist_prequote)
        curl_slist_free_all(curl_slist_prequote);
    
    if(curl_slist_postquote)
        curl_slist_free_all(curl_slist_postquote);
    
    if(curl_slist_quote)
        curl_slist_free_all(curl_slist_quote);
    
    if(curl_slist_telnet_options)
        curl_slist_free_all(curl_slist_telnet_options);
    
    curl_easy_cleanup(curl);
    //    curl_multi_cleanup(mcurl);
    
    
    PA_SetBlobParameter(params, 3, (void*)Param3.getBytesPtr(), Param3.getBytesLength());
//    Param3.toParamAtIndex(pParams, 3); /* response */
    
	Param5.toParamAtIndex(pParams, 5); /* transferInfo */
	Param6.toParamAtIndex(pParams, 6); /* headerInfo */
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
	returnValue.setReturn(pResult);
}

#pragma mark JSON

void json_wconv(const wchar_t *value, CUTF16String *u16)
{
    size_t wlen = wcslen(value);
    
#if VERSIONWIN
    *u16 = CUTF16String((const PA_Unichar *)value, wlen);
#else
    CFStringRef str = CFStringCreateWithBytes(kCFAllocatorDefault, (const UInt8 *)value, wlen*sizeof(wchar_t), kCFStringEncodingUTF32LE, true);
    if(str)
    {
        int len = CFStringGetLength(str);
        std::vector<uint8_t> buf((len+1) * sizeof(PA_Unichar));
        CFStringGetCharacters(str, CFRangeMake(0, len), (UniChar *)&buf[0]);
        *u16 = CUTF16String((const PA_Unichar *)&buf[0], len);
        CFRelease(str);
    }
#endif
}

void json_wconv(const wchar_t *value, CUTF8String *u8)
{
    C_TEXT t;
    size_t wlen = wcslen(value);
    
#if VERSIONWIN
    t.setUTF16String((const PA_Unichar *)value, wlen);
#else
    CUTF16String u16;
    json_wconv(value, &u16);
    t.setUTF16String(&u16);
#endif
    t.copyUTF8String(u8);
}

void json_wconv(const char *value, std::wstring &u32)
{
    if ((value) && strlen(value))
    {
        C_TEXT t;
        CUTF8String u8 = CUTF8String((const uint8_t *)value);
        
        t.setUTF8String(&u8);
        
#if VERSIONWIN
        u32 = std::wstring((wchar_t *)t.getUTF16StringPtr());
#else
        CFStringRef str = CFStringCreateWithCharacters(kCFAllocatorDefault, (const UniChar *)t.getUTF16StringPtr(), t.getUTF16Length());
        if(str)
        {
            size_t size = CFStringGetMaximumSizeForEncoding(CFStringGetLength(str), kCFStringEncodingUTF32LE) + sizeof(wchar_t);
            std::vector<uint8_t> buf(size);
            CFIndex len = 0;
            CFIndex count = CFStringGetBytes(str, CFRangeMake(0, CFStringGetLength(str)), kCFStringEncodingUTF32LE, 0, true, (UInt8 *)&buf[0], size, &len);
            u32 = std::wstring((wchar_t *)&buf[0], count);
            CFRelease(str);
        }
#endif
    }
    else
    {
        u32 = L"";
    }
    
}

#if USE_JSONCPP
#else
void json_push_back_s(JSONNODE *n, const char *value)
{
    if (n)
    {
        if (value)
        {
            std::wstring w32;
            json_wconv(value, w32);
            
            JSONNODE *e = json_new(JSON_STRING);
            json_set_a(e, w32.c_str());
            json_push_back(n, e);
        }
        else
        {
            JSONNODE *e = json_new(JSON_STRING);
            json_nullify(e);
            json_push_back(n, e);
        }
    }
    
}

void json_set_s(JSONNODE *n, const char *value)
{
    if (n)
    {
        if (value)
        {
            std::wstring w32;
            json_wconv(value, w32);
            json_set_a(n, w32.c_str());
        }
        else
        {
            json_nullify(n);
        }
    }
}

void json_set_s_for_key(JSONNODE *n, json_char *key, const char *value)
{
    if (n)
    {
        if (value)
        {
            std::wstring w32;
            json_wconv(value, w32);
            
            JSONNODE *e = json_get(n, key);
            if (e)
            {
                json_set_a(e, w32.c_str());//over-write existing value
            }
            else
            {
                json_push_back(n, json_new_a(key, w32.c_str()));
            }
            
        }
        else
        {
            JSONNODE *e = json_get(n, key);
            if (e)
            {
                json_nullify(e);//over-write existing value
            }
            else
            {
                JSONNODE *node = json_new_a(key, L"");
                json_nullify(node);
                json_push_back(n, node);
            }
        }
    }
}

void json_set_b_for_key(JSONNODE *n, json_char *key, json_bool_t value)
{
    if (n)
    {
        JSONNODE *e = json_get(n, key);
        if (e)
        {
            json_set_b(e, value);//over-write existing value
        }
        else
        {
            json_push_back(n, json_new_b(key, value));
        }
    }
}

void json_set_i_for_key(JSONNODE *n, json_char *key, json_int_t value)
{
    if (n)
    {
        JSONNODE *e = json_get(n, key);
        if (e)
        {
            json_set_i(e, value);//over-write existing value
        }
        else
        {
            json_push_back(n, json_new_i(key, value));
        }
    }
}

void json_set_f_for_key(JSONNODE *n, json_char *key, json_number value)
{
    if (n)
    {
        JSONNODE *e = json_get(n, key);
        if (e)
        {
            json_set_f(e, value);//over-write existing value
        }
        else
        {
            json_push_back(n, json_new_f(key, value));
        }
    }
}

void json_stringify(JSONNODE *json, CUTF16String &t, BOOL pretty)
{
    json_char *json_string = pretty ? json_write_formatted(json) : json_write(json);
    std::wstring wstr = std::wstring(json_string);
#if VERSIONWIN
    t = CUTF16String((const PA_Unichar *)wstr.c_str(), (uint32_t)wstr.length());
#else
    CFStringRef str = CFStringCreateWithBytes(kCFAllocatorDefault, (const UInt8 *)wstr.c_str(), wstr.size()*sizeof(wchar_t), kCFStringEncodingUTF32LE, true);
    if(str)
    {
        int len = CFStringGetLength(str);
        std::vector<uint8_t> buf((len+1) * sizeof(PA_Unichar));
        CFStringGetCharacters(str, CFRangeMake(0, len), (UniChar *)&buf[0]);
        t = CUTF16String((const PA_Unichar *)&buf[0], len);
        CFRelease(str);
    }
#endif
    json_free(json_string);
}
#endif

#pragma mark JSON cURL

#if USE_JSONCPP
CURLoption json_get_curl_option_name(Json::Value::const_iterator n)
#else
CURLoption json_get_curl_option_name(JSONNODE *n)
#endif
{
    CURLoption v = (CURLoption)0;
    
#if USE_JSONCPP
#else
    if(n)
    {
#endif
        
#if USE_JSONCPP
        JSONCPP_STRING s = n.name();
#else
        json_char *name = json_name(n);
#endif

#if USE_JSONCPP
        if (s.length())
#else
        if (name)
#endif
        {
            
#if USE_JSONCPP
#define CHECK_CURLOPT(__a,__b) if(s==__a){v=(CURLoption)__b;goto json_get_curl_option_exit;}
#else
        std::wstring s = std::wstring((const wchar_t *)name);
#define CHECK_CURLOPT(__a,__b) if(s.compare(L__a)==0){v=__b;goto json_get_curl_option_exit;}
#endif
            /* special string */
            CHECK_CURLOPT("URL",CURLOPT_URL)
            CHECK_CURLOPT("READDATA",CURLOPT_READDATA)
            CHECK_CURLOPT("WRITEDATA",CURLOPT_WRITEDATA)
            CHECK_CURLOPT("AUTOPROXY",CURLOPT_AUTOPROXY)
            CHECK_CURLOPT("PRIVATE",CURLOPT_PRIVATE)
            CHECK_CURLOPT("ATOMIC",CURLOPT_ATOMIC)
//            CHECK_CURLOPT("DEBUG",CURLOPT_VERBOSE)
            
            /* string */
            CHECK_CURLOPT("PROXY",CURLOPT_PROXY)
            CHECK_CURLOPT("USERPWD",CURLOPT_USERPWD)
            CHECK_CURLOPT("PROXYUSERPWD",CURLOPT_PROXYUSERPWD)
            CHECK_CURLOPT("RANGE",CURLOPT_RANGE)
            CHECK_CURLOPT("REFERER",CURLOPT_REFERER)
            CHECK_CURLOPT("FTPPORT",CURLOPT_FTPPORT)
            CHECK_CURLOPT("USERAGENT",CURLOPT_USERAGENT)
            CHECK_CURLOPT("COOKIE",CURLOPT_COOKIE)
            CHECK_CURLOPT("KEYPASSWD",CURLOPT_KEYPASSWD)
            CHECK_CURLOPT("CUSTOMREQUEST",CURLOPT_CUSTOMREQUEST)
            CHECK_CURLOPT("INTERFACE",CURLOPT_INTERFACE)
            CHECK_CURLOPT("KRBLEVEL",CURLOPT_KRBLEVEL)
            CHECK_CURLOPT("RANDOM_FILE",CURLOPT_RANDOM_FILE)
            CHECK_CURLOPT("EGDSOCKET",CURLOPT_EGDSOCKET)
            CHECK_CURLOPT("SSL_CIPHER_LIST",CURLOPT_SSL_CIPHER_LIST)
            CHECK_CURLOPT("SSLCERTTYPE",CURLOPT_SSLCERTTYPE)
            CHECK_CURLOPT("SSLKEYTYPE",CURLOPT_SSLKEYTYPE)
            CHECK_CURLOPT("ACCEPT_ENCODING",CURLOPT_ACCEPT_ENCODING)
            CHECK_CURLOPT("FTP_ACCOUNT",CURLOPT_FTP_ACCOUNT)
            CHECK_CURLOPT("COOKIELIST",CURLOPT_COOKIELIST)
            CHECK_CURLOPT("FTP_ALTERNATIVE_TO_USER",CURLOPT_FTP_ALTERNATIVE_TO_USER)
            CHECK_CURLOPT("SSH_HOST_PUBLIC_KEY_MD5",CURLOPT_SSH_HOST_PUBLIC_KEY_MD5)
            CHECK_CURLOPT("USERNAME",CURLOPT_USERNAME)
            CHECK_CURLOPT("PASSWORD",CURLOPT_PASSWORD)
            CHECK_CURLOPT("PROXYUSERNAME",CURLOPT_PROXYUSERNAME)
            CHECK_CURLOPT("PROXYPASSWORD",CURLOPT_PROXYPASSWORD)
            CHECK_CURLOPT("NOPROXY",CURLOPT_NOPROXY)
            CHECK_CURLOPT("SSH_KNOWNHOSTS",CURLOPT_SSH_KNOWNHOSTS)
            CHECK_CURLOPT("RTSP_SESSION_ID",CURLOPT_RTSP_SESSION_ID)
            CHECK_CURLOPT("RTSP_STREAM_URI",CURLOPT_RTSP_STREAM_URI)
            CHECK_CURLOPT("RTSP_TRANSPORT",CURLOPT_RTSP_TRANSPORT)
            CHECK_CURLOPT("TLSAUTH_USERNAME",CURLOPT_TLSAUTH_USERNAME)
            CHECK_CURLOPT("TLSAUTH_PASSWORD",CURLOPT_TLSAUTH_PASSWORD)
            CHECK_CURLOPT("TLSAUTH_TYPE",CURLOPT_TLSAUTH_TYPE)
            CHECK_CURLOPT("DNS_SERVERS",CURLOPT_DNS_SERVERS)
            CHECK_CURLOPT("MAIL_AUTH",CURLOPT_MAIL_AUTH)
            CHECK_CURLOPT("XOAUTH2_BEARER",CURLOPT_XOAUTH2_BEARER)
            CHECK_CURLOPT("DNS_INTERFACE",CURLOPT_DNS_INTERFACE)
            CHECK_CURLOPT("DNS_LOCAL_IP4",CURLOPT_DNS_LOCAL_IP4)
            CHECK_CURLOPT("DNS_LOCAL_IP6",CURLOPT_DNS_LOCAL_IP6)
            CHECK_CURLOPT("LOGIN_OPTIONS",CURLOPT_LOGIN_OPTIONS)
            CHECK_CURLOPT("PROXY_SERVICE_NAME",CURLOPT_PROXY_SERVICE_NAME)
            CHECK_CURLOPT("SERVICE_NAME",CURLOPT_SERVICE_NAME)
            CHECK_CURLOPT("DEFAULT_PROTOCOL",CURLOPT_DEFAULT_PROTOCOL)
            CHECK_CURLOPT("PROXY_TLSAUTH_USERNAME",CURLOPT_PROXY_TLSAUTH_USERNAME)
            CHECK_CURLOPT("PROXY_TLSAUTH_PASSWORD",CURLOPT_PROXY_TLSAUTH_PASSWORD)
            CHECK_CURLOPT("PROXY_TLSAUTH_TYPE",CURLOPT_PROXY_TLSAUTH_TYPE)
            CHECK_CURLOPT("PROXY_SSLCERTTYPE",CURLOPT_PROXY_SSLCERTTYPE)
            CHECK_CURLOPT("PROXY_SSLKEYTYPE",CURLOPT_PROXY_SSLKEYTYPE)
            CHECK_CURLOPT("PROXY_KEYPASSWD",CURLOPT_PROXY_KEYPASSWD)
            CHECK_CURLOPT("PROXY_SSL_CIPHER_LIST",CURLOPT_PROXY_SSL_CIPHER_LIST)
            CHECK_CURLOPT("PRE_PROXY",CURLOPT_PRE_PROXY)
            CHECK_CURLOPT("PROXY_PINNEDPUBLICKEY",CURLOPT_PROXY_PINNEDPUBLICKEY)
            CHECK_CURLOPT("REQUEST_TARGET",CURLOPT_REQUEST_TARGET)
            CHECK_CURLOPT("TLS13_CIPHERS",CURLOPT_TLS13_CIPHERS)
            CHECK_CURLOPT("PROXY_TLS13_CIPHERS",CURLOPT_PROXY_TLS13_CIPHERS)
            CHECK_CURLOPT("DOH_URL",CURLOPT_DOH_URL)
            
             /* path */
            CHECK_CURLOPT("SSLCERT",CURLOPT_SSLCERT)
            CHECK_CURLOPT("COOKIEFILE",CURLOPT_COOKIEFILE)
            CHECK_CURLOPT("CAINFO",CURLOPT_CAINFO)
            CHECK_CURLOPT("COOKIEJAR",CURLOPT_COOKIEJAR)
            CHECK_CURLOPT("SSLKEY",CURLOPT_SSLKEY)
            CHECK_CURLOPT("CAPATH",CURLOPT_CAPATH)
            CHECK_CURLOPT("NETRC_FILE",CURLOPT_NETRC_FILE)
            CHECK_CURLOPT("SSH_PUBLIC_KEYFILE",CURLOPT_SSH_PUBLIC_KEYFILE)
            CHECK_CURLOPT("SSH_PRIVATE_KEYFILE",CURLOPT_SSH_PRIVATE_KEYFILE)
            CHECK_CURLOPT("CRLFILE",CURLOPT_CRLFILE)
            CHECK_CURLOPT("ISSUERCERT",CURLOPT_ISSUERCERT)
            CHECK_CURLOPT("PROXY_CAINFO",CURLOPT_PROXY_CAINFO)
            CHECK_CURLOPT("PROXY_CAPATH",CURLOPT_PROXY_CAPATH)
            CHECK_CURLOPT("PROXY_SSLCERT",CURLOPT_PROXY_SSLCERT)
            CHECK_CURLOPT("PROXY_SSLKEY",CURLOPT_PROXY_SSLKEY)
            CHECK_CURLOPT("PROXY_CRLFILE",CURLOPT_PROXY_CRLFILE)

            /* path or value */
            CHECK_CURLOPT("PINNEDPUBLICKEY",CURLOPT_PINNEDPUBLICKEY)
            
            /* longint */
            CHECK_CURLOPT("PORT",CURLOPT_PORT)
            CHECK_CURLOPT("TIMEOUT",CURLOPT_TIMEOUT)
            CHECK_CURLOPT("LOW_SPEED_LIMIT",CURLOPT_LOW_SPEED_LIMIT)
            CHECK_CURLOPT("LOW_SPEED_TIME",CURLOPT_LOW_SPEED_TIME)
            CHECK_CURLOPT("RESUME_FROM",CURLOPT_RESUME_FROM)
            CHECK_CURLOPT("CRLF",CURLOPT_CRLF)
            CHECK_CURLOPT("TIMEVALUE",CURLOPT_TIMEVALUE)
            CHECK_CURLOPT("HEADER",CURLOPT_HEADER)
            CHECK_CURLOPT("NOBODY",CURLOPT_NOBODY)
            CHECK_CURLOPT("FAILONERROR",CURLOPT_FAILONERROR)
            CHECK_CURLOPT("UPLOAD",CURLOPT_UPLOAD)
            CHECK_CURLOPT("POST",CURLOPT_POST)
            CHECK_CURLOPT("DIRLISTONLY",CURLOPT_DIRLISTONLY)
            CHECK_CURLOPT("APPEND",CURLOPT_APPEND)
            CHECK_CURLOPT("NETRC",CURLOPT_NETRC)
            CHECK_CURLOPT("FOLLOWLOCATION",CURLOPT_FOLLOWLOCATION)
            CHECK_CURLOPT("PUT",CURLOPT_PUT)
            CHECK_CURLOPT("AUTOREFERER",CURLOPT_AUTOREFERER)
            CHECK_CURLOPT("PROXYPORT",CURLOPT_PROXYPORT)
            CHECK_CURLOPT("HTTPPROXYTUNNEL",CURLOPT_HTTPPROXYTUNNEL)
            CHECK_CURLOPT("SSL_VERIFYPEER",CURLOPT_SSL_VERIFYPEER)
            CHECK_CURLOPT("MAXREDIRS",CURLOPT_MAXREDIRS)
            CHECK_CURLOPT("FILETIME",CURLOPT_FILETIME)
            CHECK_CURLOPT("MAXCONNECTS",CURLOPT_MAXCONNECTS)
            CHECK_CURLOPT("FRESH_CONNECT",CURLOPT_FRESH_CONNECT)
            CHECK_CURLOPT("FORBID_REUSE",CURLOPT_FORBID_REUSE)
            CHECK_CURLOPT("CONNECTTIMEOUT",CURLOPT_CONNECTTIMEOUT)
            CHECK_CURLOPT("HTTPGET",CURLOPT_HTTPGET)
            CHECK_CURLOPT("SSL_VERIFYHOST",CURLOPT_SSL_VERIFYHOST)
            CHECK_CURLOPT("FTP_USE_EPSV",CURLOPT_FTP_USE_EPSV)
            CHECK_CURLOPT("DNS_CACHE_TIMEOUT",CURLOPT_DNS_CACHE_TIMEOUT)
            CHECK_CURLOPT("COOKIESESSION",CURLOPT_COOKIESESSION)
            CHECK_CURLOPT("BUFFERSIZE",CURLOPT_BUFFERSIZE)
            CHECK_CURLOPT("UNRESTRICTED_AUTH",CURLOPT_UNRESTRICTED_AUTH)
            CHECK_CURLOPT("FTP_USE_EPRT",CURLOPT_FTP_USE_EPRT)
            CHECK_CURLOPT("HTTPAUTH",CURLOPT_HTTPAUTH)
            CHECK_CURLOPT("FTP_CREATE_MISSING_DIRS",CURLOPT_FTP_CREATE_MISSING_DIRS)
            CHECK_CURLOPT("PROXYAUTH",CURLOPT_PROXYAUTH)
            CHECK_CURLOPT("FTP_RESPONSE_TIMEOUT",CURLOPT_FTP_RESPONSE_TIMEOUT)
            CHECK_CURLOPT("IPRESOLVE",CURLOPT_IPRESOLVE)
            CHECK_CURLOPT("MAXFILESIZE",CURLOPT_MAXFILESIZE)
            CHECK_CURLOPT("IGNORE_CONTENT_LENGTH",CURLOPT_IGNORE_CONTENT_LENGTH)
            CHECK_CURLOPT("FTP_SKIP_PASV_IP",CURLOPT_FTP_SKIP_PASV_IP)
            CHECK_CURLOPT("FTP_FILEMETHOD",CURLOPT_FTP_FILEMETHOD)
            CHECK_CURLOPT("LOCALPORT",CURLOPT_LOCALPORT)
            CHECK_CURLOPT("LOCALPORTRANGE",CURLOPT_LOCALPORTRANGE)
            CHECK_CURLOPT("CONNECT_ONLY",CURLOPT_CONNECT_ONLY)
            CHECK_CURLOPT("SSL_SESSIONID_CACHE",CURLOPT_SSL_SESSIONID_CACHE)
            CHECK_CURLOPT("SSH_AUTH_TYPES",CURLOPT_SSH_AUTH_TYPES)
            CHECK_CURLOPT("FTP_SSL_CCC",CURLOPT_FTP_SSL_CCC)
            CHECK_CURLOPT("TIMEOUT_MS",CURLOPT_TIMEOUT_MS)
            CHECK_CURLOPT("CONNECTTIMEOUT_MS",CURLOPT_CONNECTTIMEOUT_MS)
            CHECK_CURLOPT("HTTP_TRANSFER_DECODING",CURLOPT_HTTP_TRANSFER_DECODING)
            CHECK_CURLOPT("HTTP_CONTENT_DECODING",CURLOPT_HTTP_CONTENT_DECODING)
            CHECK_CURLOPT("NEW_FILE_PERMS",CURLOPT_NEW_FILE_PERMS)
            CHECK_CURLOPT("NEW_DIRECTORY_PERMS",CURLOPT_NEW_DIRECTORY_PERMS)
            CHECK_CURLOPT("POSTREDIR",CURLOPT_POSTREDIR)
            CHECK_CURLOPT("PROXY_TRANSFER_MODE",CURLOPT_PROXY_TRANSFER_MODE)
            CHECK_CURLOPT("ADDRESS_SCOPE",CURLOPT_ADDRESS_SCOPE)
            CHECK_CURLOPT("CERTINFO",CURLOPT_CERTINFO)
            CHECK_CURLOPT("TFTP_BLKSIZE",CURLOPT_TFTP_BLKSIZE)
            CHECK_CURLOPT("PROTOCOLS",CURLOPT_PROTOCOLS)
            CHECK_CURLOPT("REDIR_PROTOCOLS",CURLOPT_REDIR_PROTOCOLS)
            CHECK_CURLOPT("FTP_USE_PRET",CURLOPT_FTP_USE_PRET)
            CHECK_CURLOPT("RTSP_REQUEST",CURLOPT_RTSP_REQUEST)
            CHECK_CURLOPT("RTSP_CLIENT_CSEQ",CURLOPT_RTSP_CLIENT_CSEQ)
            CHECK_CURLOPT("RTSP_SERVER_CSEQ",CURLOPT_RTSP_SERVER_CSEQ)
            CHECK_CURLOPT("WILDCARDMATCH",CURLOPT_WILDCARDMATCH)
            CHECK_CURLOPT("TRANSFER_ENCODING",CURLOPT_TRANSFER_ENCODING)
            CHECK_CURLOPT("ACCEPTTIMEOUT_MS",CURLOPT_ACCEPTTIMEOUT_MS)
            CHECK_CURLOPT("TCP_KEEPALIVE",CURLOPT_TCP_KEEPALIVE)
            CHECK_CURLOPT("TCP_KEEPIDLE",CURLOPT_TCP_KEEPIDLE)
            CHECK_CURLOPT("TCP_KEEPINTVL",CURLOPT_TCP_KEEPINTVL)
            CHECK_CURLOPT("SASL_IR",CURLOPT_SASL_IR)
            CHECK_CURLOPT("SSL_ENABLE_NPN",CURLOPT_SSL_ENABLE_NPN)
            CHECK_CURLOPT("SSL_ENABLE_ALPN",CURLOPT_SSL_ENABLE_ALPN)
            CHECK_CURLOPT("EXPECT_100_TIMEOUT_MS",CURLOPT_EXPECT_100_TIMEOUT_MS)
            CHECK_CURLOPT("HEADEROPT",CURLOPT_HEADEROPT)
            CHECK_CURLOPT("SSL_VERIFYSTATUS",CURLOPT_SSL_VERIFYSTATUS)
            CHECK_CURLOPT("SSL_FALSESTART",CURLOPT_SSL_FALSESTART)
            CHECK_CURLOPT("PATH_AS_IS",CURLOPT_PATH_AS_IS)
            CHECK_CURLOPT("PIPEWAIT",CURLOPT_PIPEWAIT)
            CHECK_CURLOPT("STREAM_WEIGHT",CURLOPT_STREAM_WEIGHT)
            CHECK_CURLOPT("TFTP_NO_OPTIONS",CURLOPT_TFTP_NO_OPTIONS)
            CHECK_CURLOPT("TCP_FASTOPEN",CURLOPT_TCP_FASTOPEN)
            CHECK_CURLOPT("KEEP_SENDING_ON_ERROR",CURLOPT_KEEP_SENDING_ON_ERROR)
            CHECK_CURLOPT("PROXY_SSL_VERIFYPEER",CURLOPT_PROXY_SSL_VERIFYPEER)
            CHECK_CURLOPT("PROXY_SSL_VERIFYHOST",CURLOPT_PROXY_SSL_VERIFYHOST)
            CHECK_CURLOPT("PROXY_SSL_OPTIONS",CURLOPT_PROXY_SSL_OPTIONS)
            CHECK_CURLOPT("SUPPRESS_CONNECT_HEADERS",CURLOPT_SUPPRESS_CONNECT_HEADERS)
            CHECK_CURLOPT("SOCKS5_AUTH",CURLOPT_SOCKS5_AUTH)
            CHECK_CURLOPT("SSH_COMPRESSION",CURLOPT_SSH_COMPRESSION)
            CHECK_CURLOPT("HAPPY_EYEBALLS_TIMEOUT_MS",CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS)
            CHECK_CURLOPT("HAPROXYPROTOCOL",CURLOPT_HAPROXYPROTOCOL)
            CHECK_CURLOPT("DNS_SHUFFLE_ADDRESSES",CURLOPT_DNS_SHUFFLE_ADDRESSES)
            CHECK_CURLOPT("DISALLOW_USERNAME_IN_URL",CURLOPT_DISALLOW_USERNAME_IN_URL)
            CHECK_CURLOPT("UPLOAD_BUFFERSIZE",CURLOPT_UPLOAD_BUFFERSIZE)
            CHECK_CURLOPT("UPKEEP_INTERVAL_MS",CURLOPT_UPKEEP_INTERVAL_MS)
            
            /* constant or long */
            CHECK_CURLOPT("USE_SSL",CURLOPT_USE_SSL)
            CHECK_CURLOPT("SSLVERSION",CURLOPT_SSLVERSION)
            CHECK_CURLOPT("HTTP_VERSION",CURLOPT_HTTP_VERSION)
            CHECK_CURLOPT("PROXY_SSLVERSION",CURLOPT_PROXY_SSLVERSION)
            CHECK_CURLOPT("TIMECONDITION",CURLOPT_TIMECONDITION)
            CHECK_CURLOPT("PROXYTYPE",CURLOPT_PROXYTYPE)
            CHECK_CURLOPT("FTPSSLAUTH",CURLOPT_FTPSSLAUTH)
            
            /* array string */
            CHECK_CURLOPT("CONNECT_TO",CURLOPT_CONNECT_TO)
            CHECK_CURLOPT("PROXYHEADER",CURLOPT_PROXYHEADER)
            CHECK_CURLOPT("HTTPHEADER",CURLOPT_HTTPHEADER)
            CHECK_CURLOPT("HTTP200ALIASES",CURLOPT_HTTP200ALIASES)
            CHECK_CURLOPT("RESOLVE",CURLOPT_RESOLVE)
            CHECK_CURLOPT("MAIL_RCPT",CURLOPT_MAIL_RCPT)
            CHECK_CURLOPT("MAIL_FROM",CURLOPT_MAIL_FROM)
            CHECK_CURLOPT("PREQUOTE",CURLOPT_PREQUOTE)
            CHECK_CURLOPT("POSTQUOTE",CURLOPT_POSTQUOTE)
            CHECK_CURLOPT("QUOTE",CURLOPT_QUOTE)
            CHECK_CURLOPT("TELNETOPTIONS",CURLOPT_TELNETOPTIONS)
            
        json_get_curl_option_exit:
#if USE_JSONCPP
            (void)0;
#else
            json_free(name);
#endif
        }
#if USE_JSONCPP
#else
    }
#endif
    
    return v;
}

#if USE_JSONCPP
long json_get_curl_option_value(Json::Value::const_iterator n)
#else
long json_get_curl_option_value(JSONNODE *n)
#endif
{
    long v = 0;
#if USE_JSONCPP
    JSONCPP_STRING s = n->asString();
#else
    json_char *value = json_as_string(n);
#endif
  
#if USE_JSONCPP
    if(s.length())
#else
    if(value)
#endif
    {
#if USE_JSONCPP
#define CHECK_CURLOPT_VALUE(__a,__b) if(s==__a){v=(CURLoption)__b;goto json_get_curl_option_value_exit;}
#else
        std::wstring s = std::wstring((const wchar_t *)value);
#define CHECK_CURLOPT_VALUE(__a,__b) if(s.compare(L__a)==0){v=__b;goto json_get_curl_option_value_exit;}
#endif

        /* USE_SSL */
        CHECK_CURLOPT_VALUE("USESSL_NONE",CURLUSESSL_NONE)
        CHECK_CURLOPT_VALUE("USESSL_TRY",CURLUSESSL_TRY)
        CHECK_CURLOPT_VALUE("USESSL_CONTROL",CURLUSESSL_CONTROL)
        CHECK_CURLOPT_VALUE("USESSL_ALL",CURLUSESSL_ALL)

        /* SSLVERSION, PROXY_SSLVERSION */
        CHECK_CURLOPT_VALUE("SSLVERSION_DEFAULT",CURL_SSLVERSION_DEFAULT)
        CHECK_CURLOPT_VALUE("SSLVERSION_TLSv1",CURL_SSLVERSION_TLSv1)
        CHECK_CURLOPT_VALUE("SSLVERSION_SSLv2",CURL_SSLVERSION_SSLv2)
        CHECK_CURLOPT_VALUE("SSLVERSION_SSLv3",CURL_SSLVERSION_SSLv3)
        CHECK_CURLOPT_VALUE("SSLVERSION_TLSv1_0",CURL_SSLVERSION_TLSv1_0)
        CHECK_CURLOPT_VALUE("SSLVERSION_TLSv1_1",CURL_SSLVERSION_TLSv1_1)
        CHECK_CURLOPT_VALUE("SSLVERSION_TLSv1_2",CURL_SSLVERSION_TLSv1_2)
        CHECK_CURLOPT_VALUE("SSLVERSION_TLSv1_3",CURL_SSLVERSION_TLSv1_3)
        CHECK_CURLOPT_VALUE("SSLVERSION_MAX_DEFAULT",CURL_SSLVERSION_MAX_DEFAULT)
        CHECK_CURLOPT_VALUE("SSLVERSION_MAX_TLSv1_0",CURL_SSLVERSION_MAX_TLSv1_0)
        CHECK_CURLOPT_VALUE("SSLVERSION_MAX_TLSv1_1",CURL_SSLVERSION_MAX_TLSv1_1)
        CHECK_CURLOPT_VALUE("SSLVERSION_MAX_TLSv1_2",CURL_SSLVERSION_MAX_TLSv1_2)
        CHECK_CURLOPT_VALUE("SSLVERSION_MAX_TLSv1_3",CURL_SSLVERSION_MAX_TLSv1_3)
        
        /* HEADEROPT */
        CHECK_CURLOPT_VALUE("HEADER_UNIFIED",CURLHEADER_UNIFIED)
        CHECK_CURLOPT_VALUE("HEADER_SEPARATE",CURLHEADER_SEPARATE)
        
        /* HTTP_VERSION */
        CHECK_CURLOPT_VALUE("HTTP_VERSION_NONE",CURL_HTTP_VERSION_NONE)
        CHECK_CURLOPT_VALUE("HTTP_VERSION_1_0",CURL_HTTP_VERSION_1_0)
        CHECK_CURLOPT_VALUE("HTTP_VERSION_1_1",CURL_HTTP_VERSION_1_1)
        CHECK_CURLOPT_VALUE("HTTP_VERSION_2",CURL_HTTP_VERSION_2)
        CHECK_CURLOPT_VALUE("HTTP_VERSION_2TLS",CURL_HTTP_VERSION_2TLS)
        CHECK_CURLOPT_VALUE("HTTP_VERSION_2_PRIOR_KNOWLEDGE",CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE)

        /* TIMECONDITION */
        CHECK_CURLOPT_VALUE("TIMECOND_IFMODSINCE",CURL_TIMECOND_IFMODSINCE)
        CHECK_CURLOPT_VALUE("TIMECOND_IFUNMODSINCE",CURL_TIMECOND_IFUNMODSINCE)
        CHECK_CURLOPT_VALUE("TIMECOND_LASTMOD",CURL_TIMECOND_LASTMOD)

        /* PROXYTYPE */
        CHECK_CURLOPT_VALUE("PROXY_HTTPS",CURLPROXY_HTTPS)
        CHECK_CURLOPT_VALUE("PROXY_SOCKS4",CURLPROXY_SOCKS4)
        CHECK_CURLOPT_VALUE("PROXY_SOCKS4A",CURLPROXY_SOCKS4A)
        CHECK_CURLOPT_VALUE("PROXY_SOCKS5",CURLPROXY_SOCKS5)

        /* FTPSSLAUTH */
        CHECK_CURLOPT_VALUE("FTPAUTH_SSL",CURLFTPAUTH_SSL)
        CHECK_CURLOPT_VALUE("FTPAUTH_TLS",CURLFTPAUTH_TLS)
        
    json_get_curl_option_value_exit:
#if USE_JSONCPP
        (void)0;
#else
        json_free(value);
#endif
    }

    return v;
}

#if USE_JSONCPP
void json_get_curl_option_v(CURL *curl, CURLoption option, Json::Value::const_iterator n, struct curl_slist *list)
{
    if(n->isArray())
    {
        BOOL hasValue = false;
        for(Json::Value::const_iterator it = n->begin() ; it != n->end() ; it++)
        {
            if(it->isString())
            {
                JSONCPP_STRING value = it->asString();
                list = curl_slist_append(list, value.c_str());
                hasValue = true;
            }
        }
        if(hasValue) curl_easy_setopt(curl, option, list);
    }else if(n->isString())
    {
        JSONCPP_STRING value = n->asString();
        list = curl_slist_append(list, value.c_str());
        curl_easy_setopt(curl, option, list);
    }
}
#else
void json_get_curl_option_v(CURL *curl, CURLoption option, JSONNODE *n, struct curl_slist *list)
{
    if(n)
    {
        if (json_type(n) == JSON_ARRAY)
        {
            JSONNODE_ITERATOR i = json_begin(n);
            
            while (i != json_end(n))
            {
                json_char *value = json_as_string(*i);
                if(value)
                {
                    CUTF8String u;
                    json_wconv(value, &u);
                    list = curl_slist_append(list, (const char *)u.c_str());
                    json_free(value);
                }
                ++i;
            }
            if(list)
                curl_easy_setopt(curl, option, list);
        }
    }
}

void json_get_curl_option_s(CURL *curl, CURLoption option, JSONNODE *n)
{
    if(n)
    {
        json_char *value = json_as_string(n);
        
        if(value)
        {
            CUTF8String u;
            json_wconv(value, &u);
            curl_easy_setopt(curl, option, u.c_str());
            json_free(value);
        }
    }
}

void json_get_curl_option_p(CURL *curl, CURLoption option, JSONNODE *n)
{
    if(n)
    {
        json_char *value = json_as_string(n);
        
        if(value)
        {
            CUTF8String u;
            json_wconv(value, &u);
#if VERSIONMAC
            /* hfs to posix */
            C_TEXT t;
            t.setUTF8String(&u);
            t.copyPath(&u);
#endif
            curl_easy_setopt(curl, option, u.c_str());
            json_free(value);
        }
    }
}

void json_get_curl_option_i(CURL *curl, CURLoption option, JSONNODE *n)
{
    if(n)
    {
        json_int_t value = json_as_int(n);
        curl_easy_setopt(curl, option, value);
    }
}

void json_get_curl_option_c(CURL *curl, CURLoption option, JSONNODE *n)
{
    if(n)
    {
        json_int_t value = json_get_curl_option_value(n);
        curl_easy_setopt(curl, option, value);
    }
}

void json_get_curl_option_k(CURL *curl, CURLoption option, JSONNODE *n)
{
    if(n)
    {
        json_char *value = json_as_string(n);
        
        if(value)
        {
            BOOL isPath = FALSE;
            
            std::wstring s = std::wstring((const wchar_t *)value);
            if (s.find_first_of(L"sha256//") == std::wstring::npos)
            {
                isPath = TRUE;
            }
            
            CUTF8String u;
            json_wconv(value, &u);
            
#if VERSIONMAC
            if(isPath)
            {
                /* hfs to posix */
                C_TEXT t;
                t.setUTF8String(&u);
                t.copyPath(&u);
            }
#endif
            curl_easy_setopt(curl, option, u.c_str());
            
            json_free(value);
        }
    }
}
#endif

#pragma mark -

#if USE_JSONCPP
void convertFromString(std::string &fromString, CUTF16String &toString)
{
#ifdef _WIN32
    int len = MultiByteToWideChar(CP_UTF8, 0, (LPCSTR)fromString.c_str(), fromString.length(), NULL, 0);
    
    if(len){
        std::vector<uint8_t> buf((len + 1) * sizeof(PA_Unichar));
        if(MultiByteToWideChar(CP_UTF8, 0, (LPCSTR)fromString.c_str(), fromString.length(), (LPWSTR)&buf[0], len)){
            toString = CUTF16String((const PA_Unichar *)&buf[0]);
        }
    }else{
        toString = CUTF16String((const PA_Unichar *)L"\0\0");
    }
#else
    CFStringRef str = CFStringCreateWithBytes(kCFAllocatorDefault, (const UInt8 *)fromString.c_str(), fromString.length(), kCFStringEncodingUTF8, true);
    if(str){
        int len = CFStringGetLength(str);
        std::vector<uint8_t> buf((len+1) * sizeof(PA_Unichar));
        CFStringGetCharacters(str, CFRangeMake(0, len), (UniChar *)&buf[0]);
        toString = CUTF16String((const PA_Unichar *)&buf[0]);
        CFRelease(str);
    }
#endif
}
#endif

void curl_get_info(CURL *curl, CUTF16String& json)
{
    long responseCode, connectCode, fileTime, redirectCount, headerSize, requestSize, lastSocket;
    long sslVerifyResult, localPort, primaryPort, numConnects, osErrNo, httpAuthAvail, proxyAuthAvail;
    double totalTime, nameLookupTime, connectTime, appConnectTime, preTransferTime, startTransferTime, redirectTime;
    double sizeUpload, speedUpload, sizeDownload, speedDownload, contentLengthDownload, contentLengthUpload;
    long rtspClientCseq, rtspServerCseq, rtspCseqRecv, conditionUnmet;
    char *effectiveUrl = NULL;
    char *redirectUrl = NULL;
    char *contentType = NULL;
    char *ftpEntryPath = NULL;
    char *localIp = NULL;
    char *primaryIp = NULL;
    char *rtspSessionId = NULL;
    
    curl_off_t speedUploadT, speedDownloadT, sizeUploadT, sizeDownloadT, contentLengthDownloadT, contentLengthUploadT;
    
#if USE_JSONCPP
#define JSONCPP_STRING_VALUE(s) s ? s : ""
    
    Json::Value info;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_CONDITION_UNMET, &conditionUnmet))
        info["conditionUnmet"] = (Json::Int64)conditionUnmet;

    /*
     if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_CONTENT_LENGTH_UPLOAD, &contentLengthUpload))
     info["contentLengthUpload"] = contentLengthUpload;
     */

    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_CONTENT_LENGTH_UPLOAD_T, &contentLengthUploadT))
        info["contentLengthUpload"] = (Json::Int64)contentLengthUploadT;
    
    /*
     if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_CONTENT_LENGTH_DOWNLOAD, &contentLengthDownload))
     info["contentLengthDownload"] = contentLengthDownload;
     */
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_CONTENT_LENGTH_DOWNLOAD_T, &contentLengthDownloadT))
        info["contentLengthDownload"] = (Json::Int64)contentLengthDownloadT;
    
    /*
     if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_SPEED_UPLOAD, &speedUpload))
     info["speedUpload"] = speedUpload;
     */
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_SPEED_UPLOAD_T, &speedUploadT))
        info["speedUpload"] = (Json::UInt64)speedUploadT;
 
    /*
     if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_SPEED_DOWNLOAD, &speedDownload))
     info["speedDownload"] = speedDownload;
     */
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_SPEED_DOWNLOAD_T, &speedDownloadT))
        info["speedDownload"] = (Json::UInt64)speedDownloadT;
    
    /*
     if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_SIZE_DOWNLOAD, &sizeDownload))
     info["sizeDownload"] = sizeDownload;
     */
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_SIZE_DOWNLOAD_T, &sizeDownloadT))
        info["sizeDownload"] = (Json::UInt64)sizeDownloadT;
    
    /*
     if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_SIZE_UPLOAD, &sizeUpload))
     info["sizeUpload"] = sizeUpload;
     */
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_SIZE_UPLOAD_T, &sizeUploadT))
        info["sizeUpload"] = (Json::UInt64)sizeUploadT;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_RTSP_CLIENT_CSEQ, &rtspClientCseq))
        info["rtspClientCseq"] = (Json::Int64)rtspClientCseq;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_RTSP_SERVER_CSEQ, &rtspServerCseq))
        info["rtspServerCseq"] = (Json::Int64)rtspServerCseq;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_RTSP_CSEQ_RECV, &rtspCseqRecv))
        info["rtspCseqRecv"] = (Json::Int64)rtspCseqRecv;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_LASTSOCKET, &lastSocket))
        info["lastSocket"] = (Json::Int64)lastSocket;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_PRIMARY_PORT, &primaryPort))
        info["primaryPort"] = (Json::Int64)primaryPort;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_LOCAL_PORT, &localPort))
        info["localPort"] = (Json::Int64)localPort;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_HTTP_CONNECTCODE, &connectCode))
        info["connectCode"] = (Json::Int64)connectCode;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_FILETIME, &fileTime))
        info["fileTime"] = (Json::Int64)fileTime;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_TOTAL_TIME, &totalTime))
        info["totalTime"] = totalTime;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_REQUEST_SIZE , &requestSize))
        info["requestSize"] = (Json::Int64)requestSize;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_HEADER_SIZE, &headerSize))
        info["headerSize"] = (Json::Int64)headerSize;

    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_HTTPAUTH_AVAIL, &httpAuthAvail))
        info["httpAuthAvail"] = (Json::Int64)httpAuthAvail;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_PROXYAUTH_AVAIL, &proxyAuthAvail))
        info["proxyAuthAvail"] = (Json::Int64)proxyAuthAvail;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_OS_ERRNO, &osErrNo))
        info["osErrNo"] = (Json::Int64)osErrNo;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_NUM_CONNECTS, &numConnects))
        info["numConnects"] = (Json::Int64)numConnects;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &responseCode))
        info["responseCode"] = (Json::Int64)responseCode;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_NAMELOOKUP_TIME, &nameLookupTime))
        info["nameLookupTime"] = nameLookupTime;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_CONNECT_TIME, &connectTime))
        info["connectTime"] = connectTime;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_APPCONNECT_TIME, &appConnectTime))
        info["appConnectTime"] = appConnectTime;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_PRETRANSFER_TIME, &preTransferTime))
        info["preTransferTime"] = preTransferTime;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_STARTTRANSFER_TIME, &startTransferTime))
        info["startTransferTime"] = startTransferTime;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_REDIRECT_TIME, &redirectTime))
        info["redirectTime"] = redirectTime;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_SSL_VERIFYRESULT , &sslVerifyResult))
        info["sslVerifyResult"] = (Json::Int64)sslVerifyResult;
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_REDIRECT_COUNT, &redirectCount))
        info["redirectCount"] = (Json::Int64)redirectCount;
    
    if((CURLE_OK == curl_easy_getinfo(curl, CURLINFO_EFFECTIVE_URL, &effectiveUrl)))
        info["effectiveUrl"] = JSONCPP_STRING_VALUE(effectiveUrl);
    
    if((CURLE_OK == curl_easy_getinfo(curl, CURLINFO_LOCAL_IP, &localIp)))
        info["localIp"] = JSONCPP_STRING_VALUE(localIp);
    
    if((CURLE_OK == curl_easy_getinfo(curl, CURLINFO_CONTENT_TYPE, &contentType)))
        info["contentType"] = JSONCPP_STRING_VALUE(contentType);
    
    if((CURLE_OK == curl_easy_getinfo(curl, CURLINFO_PRIMARY_IP, &primaryIp)))
        info["primaryIp"] = JSONCPP_STRING_VALUE(primaryIp);
    
    if((CURLE_OK == curl_easy_getinfo(curl, CURLINFO_REDIRECT_URL, &redirectUrl)))
        info["redirectUrl"] = JSONCPP_STRING_VALUE(redirectUrl);
    
    if((CURLE_OK == curl_easy_getinfo(curl, CURLINFO_FTP_ENTRY_PATH, &ftpEntryPath)))
        info["ftpEntryPath"] = JSONCPP_STRING_VALUE(ftpEntryPath);
    
    if((CURLE_OK == curl_easy_getinfo(curl, CURLINFO_RTSP_SESSION_ID, &rtspSessionId)))
        info["rtspSessionId"] = JSONCPP_STRING_VALUE(rtspSessionId);
    
    Json::StyledWriter writer;
    std::string options = writer.write(info);
    convertFromString(options, json);
#else
    
    std::lock_guard<std::mutex> lock(mutexJson);
    
    JSONNODE *info = json_new(JSON_NODE);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_CONDITION_UNMET, &conditionUnmet))
        json_set_i_for_key(info, L"conditionUnmet", conditionUnmet);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_CONTENT_LENGTH_UPLOAD, &contentLengthUpload))
        json_set_f_for_key(info, L"contentLengthUpload", (json_number)contentLengthUpload);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_RTSP_CLIENT_CSEQ, &rtspClientCseq))
        json_set_i_for_key(info, L"rtspClientCseq", rtspClientCseq);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_RTSP_SERVER_CSEQ, &rtspServerCseq))
        json_set_i_for_key(info, L"rtspServerCseq", rtspServerCseq);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_RTSP_CSEQ_RECV, &rtspCseqRecv))
        json_set_i_for_key(info, L"rtspCseqRecv", rtspCseqRecv);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_LASTSOCKET, &lastSocket))
        json_set_i_for_key(info, L"lastSocket", lastSocket);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_PRIMARY_PORT, &primaryPort))
        json_set_i_for_key(info, L"primaryPort", primaryPort);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_LOCAL_PORT, &localPort))
        json_set_i_for_key(info, L"localPort", localPort);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_CONTENT_LENGTH_DOWNLOAD, &contentLengthDownload))
        json_set_f_for_key(info, L"contentLengthDownload", (json_number)contentLengthDownload);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_HTTP_CONNECTCODE, &connectCode))
        json_set_i_for_key(info, L"connectCode", connectCode);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_FILETIME, &fileTime))
        json_set_i_for_key(info, L"fileTime", fileTime);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_TOTAL_TIME, &totalTime))
        json_set_f_for_key(info, L"totalTime", (json_number)totalTime);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_REQUEST_SIZE , &requestSize))
        json_set_i_for_key(info, L"requestSize", requestSize);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_HEADER_SIZE, &headerSize))
        json_set_i_for_key(info, L"headerSize", headerSize);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_SPEED_UPLOAD, &speedUpload))
        json_set_f_for_key(info, L"speedUpload", (json_number)speedUpload);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_SPEED_DOWNLOAD, &speedDownload))
        json_set_f_for_key(info, L"speedDownload", (json_number)speedDownload);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_SIZE_DOWNLOAD, &sizeDownload))
        json_set_f_for_key(info, L"sizeDownload", (json_number)sizeDownload);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_SIZE_UPLOAD, &sizeUpload))
        json_set_f_for_key(info, L"sizeUpload", (json_number)sizeUpload);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_HTTPAUTH_AVAIL, &httpAuthAvail))
        json_set_i_for_key(info, L"httpAuthAvail", httpAuthAvail);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_PROXYAUTH_AVAIL, &proxyAuthAvail))
        json_set_i_for_key(info, L"proxyAuthAvail", proxyAuthAvail);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_OS_ERRNO, &osErrNo))
        json_set_i_for_key(info, L"osErrNo", osErrNo);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_NUM_CONNECTS, &numConnects))
        json_set_i_for_key(info, L"numConnects", numConnects);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &responseCode))
        json_set_i_for_key(info, L"responseCode", responseCode);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_NAMELOOKUP_TIME, &nameLookupTime))
        json_set_f_for_key(info, L"nameLookupTime", (json_number)nameLookupTime);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_CONNECT_TIME, &connectTime))
        json_set_f_for_key(info, L"connectTime", (json_number)connectTime);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_APPCONNECT_TIME, &appConnectTime))
        json_set_f_for_key(info, L"appConnectTime", (json_number)appConnectTime);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_PRETRANSFER_TIME, &preTransferTime))
        json_set_f_for_key(info, L"preTransferTime", (json_number)preTransferTime);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_STARTTRANSFER_TIME, &startTransferTime))
        json_set_f_for_key(info, L"startTransferTime", (json_number)startTransferTime);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_REDIRECT_TIME, &redirectTime))
        json_set_f_for_key(info, L"redirectTime", (json_number)redirectTime);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_SSL_VERIFYRESULT , &sslVerifyResult))
        json_set_i_for_key(info, L"sslVerifyResult", sslVerifyResult);
    
    if(CURLE_OK == curl_easy_getinfo(curl, CURLINFO_REDIRECT_COUNT, &redirectCount))
        json_set_i_for_key(info, L"redirectCount", redirectCount);
    
    if((CURLE_OK == curl_easy_getinfo(curl, CURLINFO_EFFECTIVE_URL, &effectiveUrl)))
        json_set_s_for_key(info, L"effectiveUrl", effectiveUrl);
    
    if((CURLE_OK == curl_easy_getinfo(curl, CURLINFO_LOCAL_IP, &localIp)))
        json_set_s_for_key(info, L"localIp", localIp);
    
    if((CURLE_OK == curl_easy_getinfo(curl, CURLINFO_CONTENT_TYPE, &contentType)))
        json_set_s_for_key(info, L"contentType", contentType);
    
    if((CURLE_OK == curl_easy_getinfo(curl, CURLINFO_PRIMARY_IP, &primaryIp)))
        json_set_s_for_key(info, L"primaryIp", primaryIp);
    
    if((CURLE_OK == curl_easy_getinfo(curl, CURLINFO_REDIRECT_URL, &redirectUrl)))
        json_set_s_for_key(info, L"redirectUrl", redirectUrl);
    
    if((CURLE_OK == curl_easy_getinfo(curl, CURLINFO_FTP_ENTRY_PATH, &ftpEntryPath)))
        json_set_s_for_key(info, L"ftpEntryPath", ftpEntryPath);
    
    if((CURLE_OK == curl_easy_getinfo(curl, CURLINFO_RTSP_SESSION_ID, &rtspSessionId)))
        json_set_s_for_key(info, L"rtspSessionId", rtspSessionId);
    
    json_stringify(info, json, FALSE);
    
    json_delete(info);
    
#endif
}

#pragma mark -

bool create_folder(path_t *absolute_path)
{
    bool success = false;
    
#if VERSIONMAC
    NSString *path = (NSString *)CFStringCreateWithFileSystemRepresentation(kCFAllocatorDefault, absolute_path);
    NSFileManager *fm = [[NSFileManager alloc]init];
    success = [fm createDirectoryAtPath:path
            withIntermediateDirectories:YES
                             attributes:nil
                                  error:NULL];
    [path release];
    [fm release];
#else
    success = SHCreateDirectory(NULL, (PCWSTR)absolute_path);
#endif
    
    return success;
}

void create_parent_folder(path_t *absolute_path)
{
#if VERSIONMAC
    NSString *filePath = (NSString *)CFStringCreateWithFileSystemRepresentation(kCFAllocatorDefault, absolute_path);
    absolute_path_t folderPath = absolute_path_t([[filePath stringByDeletingLastPathComponent]fileSystemRepresentation]);
    create_folder((path_t *)folderPath.c_str());
    [filePath release];
#else
    wchar_t    fDrive[_MAX_DRIVE],
    fDir[_MAX_DIR],
    fName[_MAX_FNAME],
    fExt[_MAX_EXT];
    _wsplitpath_s(absolute_path, fDrive, fDir, fName, fExt);
    absolute_path_t folderPath = fDrive;
    folderPath += fDir;
    create_folder((path_t *)folderPath.c_str());
#endif
}
